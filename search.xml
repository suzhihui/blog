<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6</title>
    <url>/2020/07/23/ES6/</url>
    <content><![CDATA[<h1 id="常见作用域"><a href="#常见作用域" class="headerlink" title="常见作用域"></a>常见作用域</h1><ul>
<li>window</li>
<li>function</li>
<li>with</li>
</ul>
<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><ul>
<li>污染全局变量</li>
<li>没声明之前使用 会预先定义：变量提升</li>
<li>可以被定义多次</li>
<li>默认不会产生作用域</li>
</ul>
<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ul>
<li>不会污染全局变量</li>
<li>不存在变量提升</li>
<li>不能被重复定义<ul>
<li>同一作用域下不能重复定义</li>
<li>let + {} 可以产生一个作用域， 异步循环</li>
</ul>
</li>
</ul>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul>
<li>常量声明</li>
</ul>
<blockquote>
<p>ing time is 15分钟</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端架构</tag>
      </tags>
  </entry>
  <entry>
    <title>electron</title>
    <url>/2021/04/22/electron/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><!-- ![输入图片说明](/img/election/1.png) -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>git 高级</title>
    <url>/2021/04/12/git%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><!-- ![输入图片说明](/img/election/1.png) -->
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;laosu&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx.qq.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> laosu is here &gt; index.txt</span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline --author=<span class="string">&#x27;laosu&#x27;</span></span><br><span class="line"></span><br><span class="line">git diff: 默认比较的是工作区和暂存区</span><br><span class="line">// 先从缓存区撤销，缓存区无内容，从历史区域撤销</span><br><span class="line">git checkout <span class="string">&quot;文件名&quot;</span></span><br><span class="line">// 有的时候我们希望提交时合并到上一次的提交</span><br><span class="line">git commit --amend</span><br><span class="line">// 若本地文件存在则不能删除，需要通过-f参数删除</span><br><span class="line">git rm 文件名</span><br><span class="line">// 删除缓存区</span><br><span class="line">git rm --cached <span class="string">&quot;文件名&quot;</span></span><br><span class="line"></span><br><span class="line">// 10. 恢复某个版本文件</span><br><span class="line">git checkout commit_id filename <span class="string">&quot;文件名&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="git-3个区"><a href="#git-3个区" class="headerlink" title="git 3个区"></a>git 3个区</h3><ul>
<li><ol>
<li>工作区</li>
</ol>
</li>
<li><ol start="2">
<li>暂存区</li>
</ol>
</li>
<li><ol start="3">
<li>版本库</li>
</ol>
</li>
</ul>
<blockquote>
<p><a href="http://mermaid-js.github.io/mermaid">mermaid 手册</a></p>
</blockquote>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    工作区 --&gt; |git add | 暂存区</span><br><span class="line">    暂存区 --&gt; |git add | 版本库</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript正则(三)</title>
    <url>/2020/04/05/javascript%E6%AD%A3%E5%88%99-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="常用的正则表达式"><a href="#常用的正则表达式" class="headerlink" title="常用的正则表达式"></a>常用的正则表达式</h1><ul>
<li><p>验证是否为有效数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析</span></span><br><span class="line"><span class="comment"> * 1.可能出现 + - 号，也可能不出现</span></span><br><span class="line"><span class="comment"> * 2.一位0-9都可以，多位首位不能是0</span></span><br><span class="line"><span class="comment"> * 3.小数部分可能有可能没有，一旦有后面必须有小数点+数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(+|-)?(\d|([1-9]\d+))(\.\d+)?$/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>验证密码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  数字、字母、下划线</span></span><br><span class="line"><span class="comment"> * 6~16位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> val = userPassInp.value</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPass</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(val.length &lt; <span class="number">6</span> || value.length &gt; <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="comment">// code ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\w&#123;6,16&#125;$/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>真实姓名</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尼古拉斯丶 赵四</span></span><br><span class="line"><span class="comment"> * 1.汉字 /^[\u4E00-\u9FA5]$/</span></span><br><span class="line"><span class="comment"> * 2.名字长度</span></span><br><span class="line"><span class="comment"> * 3.可能有译名丶汉字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[\u4E00-\u9FA5]&#123;2,10&#125;(丶[\u4E00-\u9FA5]&#123;2,10&#125;)&#123;0,2&#125;$/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>验证邮箱</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[pA-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>身体证号码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 18位</span></span><br><span class="line"><span class="comment"> * 最后 一位可能有x</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 前6位：省市县</span></span><br><span class="line"><span class="comment"> * 中间8位：年月日</span></span><br><span class="line"><span class="comment"> * 最后四位</span></span><br><span class="line"><span class="comment"> *  最后一位 =&gt; X或者数字</span></span><br><span class="line"><span class="comment"> *  倒数第二位 =&gt; 偶数 女  奇数 男</span></span><br><span class="line"><span class="comment"> *  其余的是经过算法算出来的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d&#123;17&#125;(\d|X)$/</span></span><br><span class="line"><span class="comment">// 小括号分组捕获</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;(\d)(\d|x)$%/</span></span><br><span class="line">reg2.exec(<span class="string">&quot;130828199012040517&quot;</span>)</span><br><span class="line"><span class="comment">// [&quot;130828199012040517&quot;, &quot;130828&quot;, &quot;1990&quot;, &quot;12&quot;, &quot;04&quot;, &quot;1&quot;, &quot;7&quot;, index: 0, input: &quot;130828199012040517&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript正则（一）</title>
    <url>/2020/04/02/javascript%E6%AD%A3%E5%88%99-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote>
<p>regular expression<br>RegExp 类</p>
</blockquote>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>只能处理字符串</li>
<li>它是一个规则： 可以验证字符串符合某个规则(<code>test</code>), 也可以把字符串中符合规则的内容捕获到(<code>exec/match...</code>)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;good good study , day day up! &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span>;</span><br><span class="line">reg.test(str) <span class="comment">// false  -&gt; 验证</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;2019-08-12&quot;</span> </span><br><span class="line">reg.exec(str) <span class="comment">// [&quot;2019&quot;, index: 0, inputs: &quot;原始字符串“]  -&gt; 捕获</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="编写正则表达式"><a href="#编写正则表达式" class="headerlink" title="编写正则表达式"></a>编写正则表达式</h1><p>创建方式有两种</p>
<ul>
<li>字面量<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/d+/</span>;</span><br></pre></td></tr></table></figure></li>
<li>构造函数<ul>
<li>参数1： 元字符串</li>
<li>参数2： 修饰符字符串 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\d+&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="正则结构"><a href="#正则结构" class="headerlink" title="正则结构"></a>正则结构</h1><ul>
<li>元字符</li>
<li>修饰符<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用的元字符</span></span><br><span class="line"><span class="comment">// 1.量词元字符：设置出现的次数</span></span><br><span class="line">*   -&gt; <span class="number">0</span>到多次</span><br><span class="line">+   -&gt; <span class="number">1</span>到多次</span><br><span class="line">?   -&gt; <span class="number">0</span>||<span class="number">1</span>次</span><br><span class="line">&#123;n&#125; -&gt; n次</span><br><span class="line">&#123;n,&#125; -&gt; n到多次</span><br><span class="line">&#123;n,m&#125; -&gt; n到<span class="number">5</span>次</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.特殊元字符：单个或者组合在一起代表特殊的含义</span></span><br><span class="line">\     -&gt; 转义字符 （普通-&gt;特殊-&gt;普通）</span><br><span class="line">.     -&gt; 除\n（换行符）以外的任意字符</span><br><span class="line">^     -&gt; 以哪一个元字符作为开始</span><br><span class="line">$     -&gt; 以哪一个元字符作为结束</span><br><span class="line"></span><br><span class="line">\n    -&gt; 换行符</span><br><span class="line">\d    -&gt; <span class="number">0</span>~<span class="number">9</span>之间的一个数字</span><br><span class="line">\D    -&gt; 非<span class="number">0</span>~<span class="number">9</span>之间的一个数字</span><br><span class="line">\w    -&gt; 数字、字母、下划线中的任意一个字符</span><br><span class="line">\s    -&gt; 一个空白字符(包含空格、制表符、换页符等)</span><br><span class="line">\t    -&gt; 一个制表符（一个TAB键：<span class="number">4</span>个空格</span><br><span class="line">\b    -&gt; 匹配一个单词的边界</span><br><span class="line"></span><br><span class="line">x|y   -&gt; x || y eg: jpg|png|jpeg</span><br><span class="line">[xyz] -&gt; x 或者 y 或者 z 中的一个字符</span><br><span class="line">[^xy] -&gt; 除了x/y以外的任意字符</span><br><span class="line">[a-z] -&gt; 指定a-z这个范围中的任意字符 [<span class="number">0</span>-9a-zA-Z] === \w</span><br><span class="line">[^a-z] -&gt; 上面取反</span><br><span class="line">()    -&gt; 正则中的分组符号</span><br><span class="line">(?:)  -&gt; 只匹配不捕获</span><br><span class="line">(?=)  -&gt; 正向预查</span><br><span class="line">(?!)  -&gt; 负向预查</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.普通元字符: 代表本身含义的</span></span><br><span class="line">/laosu/ 此正则匹配的就是<span class="string">&quot;laosu&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修饰符</span></span><br><span class="line">i =&gt; ignoreCase   忽略单词大小写匹配</span><br><span class="line">m =&gt; multiline    可以进行多行匹配</span><br><span class="line">g =&gt; <span class="built_in">global</span>       全局匹配</span><br><span class="line">/A/.test(<span class="string">&#x27;lalala&#x27;</span>) =&gt; <span class="literal">false</span></span><br><span class="line">/A/i.test(<span class="string">&#x27;lalala&#x27;</span>) =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript正则-五</title>
    <url>/2020/04/09/javascript%E6%AD%A3%E5%88%99-%E4%BA%94/</url>
    <content><![CDATA[<blockquote>
<p>74  </p>
</blockquote>
<h1 id="正则的分组捕获"><a href="#正则的分组捕获" class="headerlink" title="正则的分组捕获"></a>正则的分组捕获</h1><ul>
<li>身份证号码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;130828199012040112&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;(\d)(?:\d|x)$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str))</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment">  &#x27;130828199012040112&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;130828&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;1990&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;12&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;04&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;1&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;2&#x27;,</span></span><br><span class="line"><span class="comment">  index: 0,</span></span><br><span class="line"><span class="comment">  input: &#x27;130828199012040112&#x27;,</span></span><br><span class="line"><span class="comment">  groups: undefined</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// =&gt; 第一项：大正则匹配的结果</span></span><br><span class="line"><span class="comment">// =&gt; 其余项：第一个小分组单独匹配捕获的结果</span></span><br><span class="line"><span class="comment">// =&gt; 如果设置了分组（改变优先级），但是捕获的时不需要单独捕获，可以基于?:来处理</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =&gt; 既要捕获到&#123;数字&#125;，也想单独的把数字也获取到，eg: 第一次找到&#123;0&#125; 还需要单独获取0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 不设置g只匹配一次，exec和match获取的结果一致（即有大正则匹配的信息，也有小分组匹配的信息)</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str))</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)) <span class="comment">// [ &#x27;&#123;0&#125;&#x27;, &#x27;0&#x27;, index: 0, input: &#x27;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&#x27;, groups: undefined ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 多次匹配的情况下，match只能把大正则匹配的内容获取到，小分组匹配的信息无法获取</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)) <span class="comment">// [ &#x27;&#123;0&#125;&#x27;, &#x27;0&#x27;, index: 0, input: &#x27;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)) <span class="comment">// [ &#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 自己写</span></span><br><span class="line"><span class="keyword">let</span> argBig=[],</span><br><span class="line">    argSmall = [],</span><br><span class="line">    res=reg.exec(str)</span><br><span class="line"><span class="keyword">while</span>(res) &#123;</span><br><span class="line">  <span class="keyword">let</span> [big,small] = res</span><br><span class="line">  argBig.push(big)</span><br><span class="line">  argSmall.push(small)</span><br><span class="line">  res=reg.exec(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(argBig, argSmall)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="分组的每三个作用：-“分组引用”"><a href="#分组的每三个作用：-“分组引用”" class="headerlink" title="分组的每三个作用： “分组引用”"></a>分组的每三个作用： “分组引用”</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;book&quot;</span>     <span class="comment">// =&gt; ‘good&#x27;、 ’look&#x27;、 &#x27;moon&#x27;、 &#x27;foot&#x27;...</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[a-zA-Z]([a-zA-Z])\1[a-zA-Z]$/</span></span><br><span class="line"><span class="comment">// =&gt; 分组引用就是通过&#x27;\数字&#x27;让其代表和对应分组出现一模一样的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;soon&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;book&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;some&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>75</p>
</blockquote>
<h1 id="正则捕获的贪婪性"><a href="#正则捕获的贪婪性" class="headerlink" title="正则捕获的贪婪性"></a>正则捕获的贪婪性</h1><ul>
<li><p>正则捕获的贪婪性：默认情况下，正则捕获的时候，是按照当前正则所匹配的最长结果来获取的</p>
</li>
<li><p>在量词元字符后面设置? =&gt; 取消捕获时候的贪婪性（按照正则匹配的最短结果来获取）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;老苏2019@2020回家&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)) <span class="comment">// =&gt; [ &#x27;2019&#x27;, &#x27;2020&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;老苏2019@2020回家&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+?/g</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment">  &#x27;2&#x27;, &#x27;0&#x27;, &#x27;1&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;9&#x27;, &#x27;2&#x27;, &#x27;0&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;2&#x27;, &#x27;0&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>问号在正则的五大含义</p>
<ul>
<li>问号左边是非量词元字符：本身代表量词元字符，出现零到一次</li>
<li>问号左边是量词元字符：取消捕获时的贪婪性</li>
<li>(?:) 只匹配不捕获</li>
<li>(?=) 正向预查</li>
<li>(?!) 负向预查</li>
</ul>
</li>
<li><p>分组在正则的三大含义</p>
<ul>
<li>改变优先级</li>
<li>分组捕获</li>
<li>分组引用 ()\1</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript正则（二）</title>
    <url>/2020/04/03/javascript%E6%AD%A3%E5%88%99-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="元字符详细"><a href="#元字符详细" class="headerlink" title="元字符详细"></a>元字符详细</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;laosu&#x27;</span>));       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2020laosu&#x27;</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;laosu2020&#x27;</span>));   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;laosu&#x27;</span>));       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2020laosu&#x27;</span>));   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;laosu2020&#x27;</span>));   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; ^/$两个都不加：字符串中包含符合规则的内容即可</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="comment">// =&gt; 字符串只能是和规则一致的内容</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eg: 验证手机号(11位， 第一个数字1即可)</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^1\d&#123;10&#125;$/</span></span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符 \"></a>转义字符 \</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 不是小数点；是除\n外的任意字符</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^2.3$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2.3&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2@3&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;23&#x27;</span>))    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \. 只能是小数点</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^2\.3$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2.3&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2@3&#x27;</span>))  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;23&#x27;</span>))    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;\d&quot;</span>;</span><br><span class="line">reg = <span class="regexp">/^\d$/</span>;    <span class="comment">// -&gt; \d 代表0~9的数字</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// false</span></span><br><span class="line">reg = <span class="regexp">/^\\d$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>x|y</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^18|29$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;18&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;29&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;129&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;189&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;1829&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;829&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;182&#x27;</span>))   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>直接x|y会存在很乱的优先级问题, 一般我们写的时候都伴随着小括号进行分组,因为小括号改变处理的优先级</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(18|29)$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;18&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;29&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;129&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;189&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;1829&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;829&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;182&#x27;</span>))   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>[]<ul>
<li>中括号中出现的字符一般都代表本身的含义</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[@+]$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;@&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;+&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;@@&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;@+&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[\d]$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;d&quot;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;\\&quot;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;9&quot;</span>))  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>中括号中不存在多位数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[18]$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;8&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;18&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[10-29]$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;0&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;2&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;9&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;10&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript正则-六</title>
    <url>/2020/04/11/javascript%E6%AD%A3%E5%88%99-%E5%85%AD/</url>
    <content><![CDATA[<h1 id="其它正则捕获的方法"><a href="#其它正则捕获的方法" class="headerlink" title="其它正则捕获的方法"></a>其它正则捕获的方法</h1><ul>
<li>test也能捕获（本意是匹配）<ul>
<li>RegExp.$1-RegExp.$9: 获取当前本次正则匹配后，第一个到第九个分组信息<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/g</span></span><br><span class="line"><span class="comment">// change lastIndex for RegExp</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);    <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);    <span class="comment">// 2  存的是上次捕获的结果</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>replace 字符串中实现替换的方法（一般都是伴随正则一起使用的）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;laosu2019@laosu@2020&#x27;</span></span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="string">&#x27;laosu&#x27;</span>, <span class="string">&#x27;老苏&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 老苏2019@laosu@2020</span></span><br><span class="line">str = str.replace(<span class="string">&#x27;laosu&#x27;</span>, <span class="string">&#x27;老苏&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 老苏2019@老苏@2020</span></span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="regexp">/laosu/g</span>, <span class="string">&#x27;老苏&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 老苏2019@老苏@2020</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="案例：把时间字符串进行处理"><a href="#案例：把时间字符串进行处理" class="headerlink" title="案例：把时间字符串进行处理"></a>案例：把时间字符串进行处理</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="string">&#x27;2019-08-13&#x27;</span></span><br><span class="line"><span class="comment">// =&gt; &#x27;2019年08月13日</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)$/</span></span><br><span class="line">time = time.replace(reg, <span class="string">&quot;$1年$2月$3日&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time); <span class="comment">// 2019年08月13日</span></span><br><span class="line"></span><br><span class="line">time = time.replace(reg, <span class="function">(<span class="params">...arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//=&gt; 这里的$1-$3是我们自己设置的变量 </span></span><br><span class="line">  <span class="built_in">console</span>.log(big,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">let</span> [,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>] = arg</span><br><span class="line">  <span class="keyword">return</span> $<span class="number">1</span>+<span class="string">&#x27;年&#x27;</span>+$<span class="number">2</span>+<span class="string">&#x27;月&#x27;</span>+$<span class="number">3</span>+<span class="string">&#x27;日&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="单词首字母大写"><a href="#单词首字母大写" class="headerlink" title="单词首字母大写"></a>单词首字母大写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;good good study, day day up!&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b([a-zA-Z])[a-zA-Z]*\b/g</span></span><br><span class="line">str = str.replace(reg, <span class="function">(<span class="params">...arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [content, $<span class="number">1</span>] = arg</span><br><span class="line">  $<span class="number">1</span>=$<span class="number">1.</span>toUpperCase()</span><br><span class="line">  content = content.substring(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> $<span class="number">1</span> + content</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<h2 id="简单密码"><a href="#简单密码" class="headerlink" title="简单密码"></a>简单密码</h2><blockquote>
<p>6-16位字符 区分大小写<br>不可以仅为连续数字或相同字符<br>数字、字母、符号至少包含两种</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;book&quot;</span>     <span class="comment">// =&gt; ‘good&#x27;、 ’look&#x27;、 &#x27;moon&#x27;、 &#x27;foot&#x27;...</span></span><br><span class="line"><span class="comment">// let reg = /^[a-zA-Z]([a-zA-Z])\1[a-zA-Z]$/</span></span><br><span class="line"><span class="comment">// let reg = /([a-zA-Z])\1&#123;&#125;/</span></span><br><span class="line"><span class="comment">// let reg = /((\w)\1)&#123;6,16&#125;$/ig</span></span><br><span class="line"><span class="comment">// let reg = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+\-=\[\]&#123;&#125;;&#x27;:&quot;\\|,.&lt;&gt;\/?]).&#123;6,12&#125;$/</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(?=.*(\d|[!@#$%^&amp;*()_+\-=\[\]&#123;&#125;;&#x27;:&quot;\\|,.&lt;&gt;\/?]))(?=.*([a-zA-Z]|[!@#$%^&amp;*()_+\-=\[\]&#123;&#125;;&#x27;:&quot;\\|,.&lt;&gt;\/?])).&#123;6,12&#125;$/</span></span><br><span class="line"><span class="comment">// let reg = /^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$).&#123;6,20&#125;$/</span></span><br><span class="line"><span class="comment">// let reg = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;6,&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;m$$$$$$&#x27;</span>)) </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript正则 (四)</title>
    <url>/2020/04/07/javascript%E6%AD%A3%E5%88%99-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="正则两种创建方式的区别"><a href="#正则两种创建方式的区别" class="headerlink" title="正则两种创建方式的区别"></a>正则两种创建方式的区别</h1><ul>
<li>构造函数因为传递的是字符串，\ 需要写两个才代表斜杠</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line">reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;g&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>正则表达式中的部分内容是变量存储的值<ul>
<li>两个斜杠中间包起来的都是元字符(如果正则中要包含某个变量的值，则不能使用字面量方式创建)</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="string">&quot;laosu&quot;</span></span><br><span class="line">reg = <span class="regexp">/^@&quot;+type+&quot;@$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;@laosu@&quot;</span>));   <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;@&quot;&quot;&quot;typeeeeee&quot;@&#x27;</span>)); <span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这种情况只能使用构造函数方式（因为它传递的规则是字符串，只有这样才能进行字符串拼接)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;^@&quot;</span>+type+<span class="string">&quot;@$&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;@laosu@&quot;</span>))  <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="正则捕获"><a href="#正则捕获" class="headerlink" title="正则捕获"></a>正则捕获</h1><blockquote>
<p>实现正则捕获的办法</p>
</blockquote>
<ul>
<li>正则RegExp.prototype上的方法<ul>
<li>exec<ul>
<li>捕获的结果是null或者一个数组</li>
<li>第一项：本次捕获到的内空</li>
<li>其余项：对应小分组本次单独捕获的内容</li>
<li>index: 当前捕获内容在字符串中的起始索引</li>
<li>input: 原始字符串</li>
<li>第执行一次exec只能捕获到一个符合正则的，但是默认只捕获第一个（懒惰性)<ul>
<li>lastIndex: 当前正则下一次匹配的起始索引位置 -&gt; reg.lastIndex</li>
<li>第一次执行完lastIndex没有变</li>
<li></li>
</ul>
</li>
</ul>
</li>
<li>test</li>
</ul>
</li>
<li>字符串String.prototye上支持正则表达式处理的方法<ul>
<li>replace</li>
<li>match</li>
<li>splite</li>
<li>…..</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;laosu2019laosu2020laosu2021&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)) <span class="comment">// [&quot;2019&quot;, index: 5, input: &quot;laosu2019laosu2020laosu2021&quot;, groups: undefined]</span></span><br><span class="line">reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)) <span class="comment">// =&gt; [&quot;2019&quot;, ...]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex) <span class="comment">// 设置全局匹配修饰符g后，第一次匹配完 lastIndex 会自已修改</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>需求： 编写一个execAll， 执行一次可以把所有匹配的结果捕获到（前提正则一定要设置全局修饰符g）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">execAll</span>(<span class="params">str=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// str=&gt; str 要匹配的字符串</span></span><br><span class="line">    <span class="comment">// =&gt; this: RegExp的实例</span></span><br><span class="line">    <span class="comment">// 验证当前正则是否设置了g</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.global) <span class="keyword">return</span> <span class="built_in">this</span>.exec(str)</span><br><span class="line">    <span class="keyword">let</span> ary = [],</span><br><span class="line">        res = <span class="built_in">this</span>.exec(str)</span><br><span class="line">    <span class="comment">// 只知道条件用while循环</span></span><br><span class="line">    <span class="keyword">while</span>(res) &#123;</span><br><span class="line">      ary.push(res[<span class="number">0</span>])</span><br><span class="line">      <span class="comment">// =&gt; 只要捕获的内容不为null</span></span><br><span class="line">      res = <span class="built_in">this</span>.exec(str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary.length === <span class="number">0</span> ? <span class="literal">null</span> : ary</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">RegExp</span>.prototype.execAll = execAll</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.execAll(str))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的 execAll 等价于 String.prototype.match()</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>js防抖节流</title>
    <url>/2021/05/20/js%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/img/2.jpg" alt="概念"></p>
<h3 id="函数节流（Throttle"><a href="#函数节流（Throttle" class="headerlink" title="函数节流（Throttle)"></a>函数节流（Throttle)</h3><p>节流就是保证一段时间内，核心代码只执行一次</p>
<h3 id="防抖（Debounce"><a href="#防抖（Debounce" class="headerlink" title="防抖（Debounce)"></a>防抖（Debounce)</h3><p>防抖就是一段时间结束后，才能触发一次事件，如果一段时间未结束再次触发事件， 就会重新开始计算时间</p>
]]></content>
      <tags>
        <tag>js面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2020/08/25/mysql-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="数据库能做什么"><a href="#数据库能做什么" class="headerlink" title="数据库能做什么"></a>数据库能做什么</h1><h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><ul>
<li>实体</li>
<li>数据库(DB)</li>
<li>数据库管理系统(DBMS)</li>
<li>SQL</li>
<li>SQL规范<ul>
<li>SQL语句不区分大小写，建议SQL关键字大写，表名和列表小写</li>
<li>命令用分号结尾</li>
<li>命令可以缩进和换行，一种类型的关键字放在一行</li>
<li>可以写单行和多行注释 , #和–是单行注释，/***/多行注释<h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><h1 id="MYSQL简介"><a href="#MYSQL简介" class="headerlink" title="MYSQL简介"></a>MYSQL简介</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote>
<p>C:\Program Files\MySQL\MySQL Server 5.5\my.ini</p>
</blockquote>
</li>
</ul>
</li>
<li>port 端口号</li>
<li>basedir 安装目录</li>
<li>datadir 数据存放访目录</li>
<li>character_set_server 字符集</li>
<li>default-storage-engine 存储引擎</li>
<li>sql-mode 语法模式</li>
<li>max-connections 最大连接数</li>
</ul>
<h2 id="MYSQL启动和停止"><a href="#MYSQL启动和停止" class="headerlink" title="MYSQL启动和停止"></a>MYSQL启动和停止</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">net start MySQL</span><br><span class="line">net stop MySQL</span><br></pre></td></tr></table></figure>
<h2 id="显示有哪些表"><a href="#显示有哪些表" class="headerlink" title="显示有哪些表"></a>显示有哪些表</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -P <span class="number">3306</span> -uroot -p123456</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<h2 id="显示当前数据库"><a href="#显示当前数据库" class="headerlink" title="显示当前数据库"></a>显示当前数据库</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>
<h2 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">desc user;</span><br></pre></td></tr></table></figure>

<h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><h1 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h1><h2 id="域完整性"><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h2><h3 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h3><ul>
<li>字符串</li>
<li>日期时间</li>
<li>数值<ul>
<li>整数</li>
<li>小数</li>
</ul>
</li>
</ul>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><h1 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h1><ul>
<li>主键约束<ul>
<li>表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合称为表的主键，主键表的数据不同重复</li>
<li>如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为”组合键”</li>
</ul>
</li>
<li>外键</li>
<li>唯一约束</li>
<li>标识列<ul>
<li>当表中没有合适的列作为主键时可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条记录。</li>
<li>标识列的值是自动生成的，不能在该列上输入数据</li>
</ul>
</li>
<li>外键约束<ul>
<li>主表没有记录，子表中不能添加相应的记录</li>
<li>修改和删除主表记录不能让子表记录孤立，必须相应修改和删除</li>
</ul>
</li>
</ul>
<h1 id="数据操作语言"><a href="#数据操作语言" class="headerlink" title="数据操作语言"></a>数据操作语言</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关键字大写</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line">(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">city <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">DESC</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何修改和增加表里的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> idcard <span class="type">VARCHAR</span>(<span class="number">225</span>) <span class="keyword">NULL</span></span><br><span class="line"><span class="comment">-- 修改列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY idcard <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> idcard</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX uq_student_idcard (idcard)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY <span class="keyword">COLUMN</span> city <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;南京&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> score <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_score_student_id <span class="keyword">FOREIGN</span> KEY(student_id) <span class="keyword">REFERENCES</span> student(id)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sql</span></span><br><span class="line"><span class="comment">-- 插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name,idcard,age,city)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name,idcard,age,city)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123451&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;广州&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 更新</span></span><br><span class="line"><span class="comment">-- 1 -&gt; 可以一次更新多列，可以用逗号隔开 2.可以指定更新条件，如果有我个条件可以用and or not</span></span><br><span class="line">UPDATE student <span class="keyword">SET</span> age<span class="operator">=</span><span class="number">40</span>,city<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- TRUNCATE 截断表 重置表标识列</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> stu.student;</span><br><span class="line"><span class="comment">-- 查询北京 的同学信息， 并按ID倒序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> id, NAME <span class="keyword">FROM</span> student <span class="keyword">where</span> city<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span></span><br><span class="line"><span class="comment">-- 别名</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, city home <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> city<span class="operator">=</span><span class="string">&#x27;南京&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span></span><br><span class="line"><span class="comment">-- 查询空行</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name, idcard, age, city) <span class="keyword">VALUES</span>(<span class="string">&#x27;陈七&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> stu.student <span class="keyword">WHERE</span> level <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="comment">-- 常量列</span></span><br><span class="line"><span class="keyword">SELECT</span> id, NAME, city, <span class="string">&#x27;中国&#x27;</span> <span class="keyword">as</span> country</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">where</span> city<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span></span><br><span class="line"><span class="comment">-- 分页</span></span><br><span class="line"><span class="keyword">SELECT</span> id, NAME, city</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line">limit <span class="number">3</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs(三)</title>
    <url>/2020/09/03/nestjs-%E4%B8%89/</url>
    <content><![CDATA[<h2 id="一、什么是TypeOrm"><a href="#一、什么是TypeOrm" class="headerlink" title="一、什么是TypeOrm"></a>一、什么是<code>TypeOrm</code></h2><p><code>TypeORM</code>是一个优秀的 <code>Node.js ORM</code>框架，采用<code>TypeScript</code>编写，支持使用<code>TypeScript</code> 或 <code>Javascript（ES5，ES6，ES7）</code>开发。目标是保持支持最新的<code>Javascript</code>特性来帮助开发各种用户数据库的应用 - 不管是轻应用还是企业级的。</p>
<p>简单一句话概括就是使用<code>typescript</code>来写的对象关系映射(<code>Object Relational Mapping</code>,简称<code>ORM,或O/RM,或O/R mapping</code>)</p>
<h2 id="二、TypeORM能做什么"><a href="#二、TypeORM能做什么" class="headerlink" title="二、TypeORM能做什么"></a>二、<code>TypeORM</code>能做什么</h2><ul>
<li>根据模型自动创建数据库表</li>
<li>可以透明的插入/更新/删除数据库对象</li>
<li>映射数据库<code>table</code>到<code>Javascript</code>对象，映射表列到<code>Javascript</code>对象属性</li>
<li>提供表的一对一，多对一，一对多，多对多关系处理</li>
</ul>
<h2 id="三、我们为什么要使用TypeORM"><a href="#三、我们为什么要使用TypeORM" class="headerlink" title="三、我们为什么要使用TypeORM"></a>三、我们为什么要使用<code>TypeORM</code></h2><ul>
<li><code>TypeORM</code>可以帮助开发者专注于业务逻辑，而不用过于担心数据存储的问题。</li>
<li>我们不需要特意去学习各种种<code>SQL</code>语句</li>
<li>不需要考虑<code>SQL</code>注入等一些因素</li>
<li>不需要考虑未来更换数据库来修改<code>SQL</code>语句</li>
</ul>
<h2 id="四、目前Nodejs中常用的ORM框架"><a href="#四、目前Nodejs中常用的ORM框架" class="headerlink" title="四、目前Nodejs中常用的ORM框架"></a>四、目前<code>Nodejs</code>中常用的<code>ORM</code>框架</h2><ul>
<li><a href="https://typeorm.io/"><code>TypeORM</code></a></li>
<li><a href="https://www.bookstack.cn/read/TypeORM-0.2.20-zh/spilt.17.spilt.3.README.md"><code>TypeORM中文文档</code></a></li>
<li><a href="https://sequelize.org/"><code>sequelize</code></a></li>
</ul>
<p>在<code>Nestjs</code>中两个<code>ORM</code>都支持使用,一般使用<code>TypeORM</code>的比较多</p>
<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ul>
<li><p>1、全局安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install typeorm -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、创建一个项目并且指定数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">typeorm init --name projectName --database mysql</span><br></pre></td></tr></table></figure>
<ul>
<li>–name指定项目名称</li>
<li>–database指定选用那种数据库,目前支持的数据库有<code>mysql, mariadb, postgres, sqlite, mssql, oracle, mongodb,cordova, react-native, expo, nativescript</code>(前提是你的电脑上安装的对应的数据库)</li>
</ul>
</li>
<li><p>3、初始化项目后的目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── ormconfig.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── entity</span><br><span class="line">│   │   └── User.ts</span><br><span class="line">│   ├── index.ts</span><br><span class="line">│   └── migration</span><br><span class="line">└── tsconfig.json</span><br><span class="line"></span><br><span class="line">3 directories, 6 files</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ormconfig.json</code>文件配置与数据库连接相关的信息</li>
<li><code>src/entity</code>表示实体类,一般约定为建表的对象(默认创建一个User.ts)的文件</li>
<li><code>src/index.ts</code>入口文件,练习对数据的增删改查操作</li>
</ul>
</li>
<li><p>4、安装依赖包</p>
</li>
<li><p>5、修改<code>ormconfig.json</code>文件数据库配置信息</p>
</li>
<li><p>6、运行命令并且查看数据库是否自动创建表(<font color="#f00">需要手动创建一个数据库</font>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、<font color="#f00"><strong>注意点:</strong></font></p>
<ul>
<li><code>mysql</code>中编码选择,要选用<code>utf8mb4</code>编码才是<code>utf8</code>,不是选<code>utf8</code>就表示是<code>utf8</code>编码</li>
<li><code>utf8mb4_bin</code>字符集排序规则</li>
</ul>
</li>
</ul>
<h2 id="二、ormconfig-json文件详解"><a href="#二、ormconfig-json文件详解" class="headerlink" title="二、ormconfig.json文件详解"></a>二、<code>ormconfig.json</code>文件详解</h2><ul>
<li><p>1、解析各个字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;mysql&quot;</span>, <span class="comment">// 选用的数据库</span></span><br><span class="line">  <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 数据库地址</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">3306</span>, <span class="comment">// 数据库端口</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="comment">// 数据库用户名</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="comment">// 数据库密码</span></span><br><span class="line">  <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="comment">// 数据库</span></span><br><span class="line">  <span class="attr">&quot;synchronize&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否同步true表示会自动将src/entity里面定义的数据模块同步到数据库生成数据表(已经存在的表的时候再运行会报错)</span></span><br><span class="line">  <span class="attr">&quot;dropSchema&quot;</span>: <span class="literal">true</span>, <span class="comment">// 删除数据库中的表</span></span><br><span class="line">  <span class="attr">&quot;logging&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否打印日志,执行sql语句时候输出原生sql,也可以配置成一个数组[&quot;query&quot;, &quot;error&quot;, &quot;schema&quot;]指定sql的执行类型</span></span><br><span class="line">  <span class="attr">&quot;charset&quot;</span>: <span class="string">&quot;utf8mb4&quot;</span>, <span class="comment">// 编码</span></span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span>: <span class="string">&quot;local&quot;</span>, <span class="comment">// 时区,默认本地,也可以写&quot;+8&quot;</span></span><br><span class="line">  <span class="attr">&quot;entityPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 给此数据库连接上的所有表（或集合）加的前缀。</span></span><br><span class="line">  <span class="attr">&quot;entities&quot;</span>: [ <span class="comment">// 定义TypeORM需要查找的数据模型的,可以定义多个</span></span><br><span class="line">      <span class="string">&quot;src/entity/**/*.ts&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;migrations&quot;</span>: [ <span class="comment">// 数据迁移文件生成的地方</span></span><br><span class="line">      <span class="string">&quot;src/migration/**/*.ts&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;subscribers&quot;</span>: [ <span class="comment">// 订阅(用的少)</span></span><br><span class="line">      <span class="string">&quot;src/subscriber/**/*.ts&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;cli&quot;</span>: &#123; <span class="comment">// 数据迁移工具使用的</span></span><br><span class="line">      <span class="attr">&quot;entitiesDir&quot;</span>: <span class="string">&quot;src/entity&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;migrationsDir&quot;</span>: <span class="string">&quot;src/migration&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;subscribersDir&quot;</span>: <span class="string">&quot;src/subscriber&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、关于ormconfig-json文件的几种写法"><a href="#三、关于ormconfig-json文件的几种写法" class="headerlink" title="三、关于ormconfig.json文件的几种写法"></a>三、关于<code>ormconfig.json</code>文件的几种写法</h2><ul>
<li><p>1、直接选择默认的<code>ormconfig.json</code>,<code>src/index.ts</code>中的<code>createConnection</code>方法会默认去读取</p>
</li>
<li><p>2、直接使用<code>ormconfig.js</code>类似上面<code>ormconfig.json</code>一样的会默认读取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;typeorm_mysql&#x27;</span>,</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">dropSchema</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">entities</span>: [</span><br><span class="line">    <span class="string">&#x27;src/entity/**/*.ts&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3、还可以使用<code>ormconfig.xml</code>和<code>ormconfig.yml</code>格式</p>
</li>
<li><p>4、<a href="https://github.com/kuangshp/nest-book-code/tree/10.type_orm/typeorm_mysql">以上配置参考代码</a></p>
</li>
<li><p>5、不使用配置文件,直接在<code>src/index.ts</code>的<code>createConnection</code>方法中写死(可以直接删除<code>ormconfig.[format]</code>的文件, <code>format=[js，ts，json，yml，yaml，xml]</code>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">createConnection(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;typeorm_mysql&#x27;</span>,</span><br><span class="line">    <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">dropSchema</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">entities</span>: [</span><br><span class="line">        <span class="string">&#x27;src/entity/**/*.ts&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;).then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">  <span class="comment">// 业务代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>6、连接远程数据库(比如可能买了阿里云数据库服务的业务)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">createConnection(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;mysql://test:test@localhost/test&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、一般选用<code>ormconfig.js</code>就可以主要出于3方面原因</p>
<ul>
<li>1、查询顺序<code>[js，ts，json，yml，yaml，xml]</code>从左到右边开始的顺序查找</li>
<li>2、如果存在多个数据库的时候直接导出一个数组</li>
<li>3、可以使用<code>.env</code>的文件,避免数据库敏感信息泄漏</li>
</ul>
</li>
</ul>
<p>前面我们介绍了<code>TypeORM</code>是一个对象关系数据模型的工具,我们要对数据库的增删改查等操作先要创建表,建表我们不直接写原生<code>SQL</code>语句(但是创建数据库还是要我们手动创建的),我们直接写<code>typescript</code>的对象,通过同步的方式就自动创建对应对象的表,一个实体类就生成一张数据表</p>
<h2 id="一、实体类的认识"><a href="#一、实体类的认识" class="headerlink" title="一、实体类的认识"></a>一、实体类的认识</h2><ul>
<li><p>1、最基本的结构</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entity是由@Entity装饰器装饰的模型。将为此类模型创建数据库表</span></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 下面定义的会自动在数据库中生成对应的字段</span></span><br><span class="line">  <span class="comment">// 主键且自动自增的</span></span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CreateDateColumn</span>()</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UpdateDateColumn</span>()</span><br><span class="line">  <span class="attr">updateAt</span>: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、关于<code>@Entity()</code>中可扩充的参数</p>
<p>可配置的参数</p>
<ul>
<li><code>name</code>配置映射到数据库表名,如果不指定会以实体类名字创建数据表</li>
<li><code>orderBy</code>排序方式(一般不用)</li>
<li><code>engine</code>引擎(一般不用)</li>
<li><code>database</code>数据库(一般不用,除非多个数据库的时候)</li>
</ul>
</li>
<li><p>4、关于字段装饰器参数的介绍<br>不管是使用<code>@PrimaryGeneratedColumn()</code>、<code>@Column()</code>等装饰器装饰字段的我们都叫字段装饰器</p>
<p>可配置的参数</p>
<ul>
<li><code>type</code>配置字段类型,在<code>mysql</code>中字符类型可能是<code>char</code>、<code>varchar</code>、<code>text</code>,数字类型可能是<code>int</code>、<code>tinyint</code>,小数类型可能是<code>float</code>、<code>double</code>、<code>decimal(10,2)</code>等</li>
<li><code>name</code>真正映射到<code>mysql</code>数据库中字段名字,如果不指定会默认以对象的字段为名字(<font color="#f00">建议都指定</font>)</li>
<li><code>length</code>长度,比如在<code>mysql</code>中字段为<code>varchar</code>的时候指定字段长度</li>
<li><code>nullable</code>在<code>mysql</code>中字段是否可以为<code>NULL</code>值,默认为<code>false</code></li>
<li><code>select</code>改字段是否可以被查询出来(针对使用<code>typeORM</code>的查寻操作,不针对你使用原生<code>SQL</code>语句操作),默认为<code>true</code>表示可以被查询出来</li>
<li><code>default</code>默认值,比如插入数据的时候,没传递该字段的值,就默认一个值</li>
<li><code>unique</code>是否唯一约束</li>
<li><code>comment</code>备注该字段是做什么的(<font color="#f00">建议都写上,方便阅读</font>)</li>
<li><code>enum</code>枚举类型</li>
<li><code>array</code>该列是否以数组</li>
</ul>
</li>
<li><p>5、一份完整的实体类清单</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;int&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    <span class="attr">comment</span>: <span class="string">&#x27;主键id&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;varchar&#x27;</span>,</span><br><span class="line">    <span class="attr">nullable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;username&#x27;</span>, <span class="comment">// 如果是一样的可以不指定</span></span><br><span class="line">    <span class="attr">comment</span>: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;varchar&#x27;</span>,</span><br><span class="line">    <span class="attr">nullable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">comment</span>: <span class="string">&#x27;密码&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(<span class="string">&#x27;tinyint&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">nullable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;is_del&#x27;</span>,</span><br><span class="line">    <span class="attr">comment</span>: <span class="string">&#x27;是否删除,1表示删除,0表示正常&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">isDel</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CreateDateColumn</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;timestamp&#x27;</span>,</span><br><span class="line">    <span class="attr">nullable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;created_at&#x27;</span>, <span class="comment">// mysql数据库规范是使用下划线命名的,不使用驼峰</span></span><br><span class="line">    <span class="attr">comment</span>: <span class="string">&#x27;创建时间&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UpdateDateColumn</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;timestamp&#x27;</span>,</span><br><span class="line">    <span class="attr">nullable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;updated_at&#x27;</span>,</span><br><span class="line">    <span class="attr">comment</span>: <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">updateAt</span>: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、执行命令<code>npm run start</code>数据表会自动同步到数据库中</p>
</li>
<li><p>7、生成的数据结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------+-----+----------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> Field      <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>              <span class="operator">|</span> Extra             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------+-----+----------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> id         <span class="operator">|</span> <span class="type">int</span>          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                 <span class="operator">|</span> auto_increment    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>                 <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                 <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> is_del     <span class="operator">|</span> tinyint      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                    <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> created_at <span class="operator">|</span> <span class="type">timestamp</span>(<span class="number">6</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) <span class="operator">|</span> DEFAULT_GENERATED <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> updated_at <span class="operator">|</span> <span class="type">timestamp</span>(<span class="number">6</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) <span class="operator">|</span> DEFAULT_GENERATED <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+------+-----+----------------------+-------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="一、修改下配置"><a href="#一、修改下配置" class="headerlink" title="一、修改下配置"></a>一、修改下配置</h2><p><font color="#f00"><strong>注意点:</strong></font>前面一章节我们已经自动生成表了,我们需要将<code>ormconfig.js</code>文件里面的几个选项改<code>false</code>,不然会直接删除数据库中的表,或者报错,当前不想要该表的时候开启</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">dropSchema</span>: <span class="literal">false</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、新增数据"><a href="#二、新增数据" class="headerlink" title="二、新增数据"></a>二、新增数据</h2><ul>
<li><p>1、新增数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="comment">// 引入刚刚定义的实体类</span></span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/User&quot;</span>;</span><br><span class="line"></span><br><span class="line">createConnection().then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> User()</span><br><span class="line">  user.username = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  user.password = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">  <span class="comment">// save里面传递一个对象</span></span><br><span class="line">  connection.manager.save(user).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;插入成功&#x27;</span>, user);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、使用<code>async/await</code>方式新增数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">createConnection().then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">  <span class="comment">// 2.使用async+await</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> User();</span><br><span class="line">  user.username = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">  user.password = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> connection.manager.save(user);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;插入结果&#x27;</span>, result);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、使用<code>Repositories</code>(使用句柄的方式)方式新增数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">createConnection().then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">  <span class="comment">// 3.使用Repositories方式新增数据</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> User();</span><br><span class="line">  user.username = <span class="string">&#x27;王五&#x27;</span>;</span><br><span class="line">  user.password = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.save(user);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure></li>
<li><p>4、查询数据表中数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+----------------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> is_del <span class="operator">|</span> created_at                 <span class="operator">|</span> updated_at                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+----------------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">18</span>:<span class="number">27.138086</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">18</span>:<span class="number">27.138086</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李四     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">46</span>:<span class="number">02.196676</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">46</span>:<span class="number">02.196676</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 王五     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">29.918676</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">29.918676</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+----------------------------+----------------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、删除数据"><a href="#三、删除数据" class="headerlink" title="三、删除数据"></a>三、删除数据</h2><ul>
<li><p>1、删除数据比较简单,直接指定要删除的数据就可以(先要查询出来然后删除)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">createConnection().then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">  <span class="comment">// 4.删除数据</span></span><br><span class="line">  <span class="comment">// 4.1创建一个句柄</span></span><br><span class="line">  <span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line">  <span class="comment">// 4.2根据句柄去查询实体findOne传递数字会默认根据id查询</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> userRepository.findOne(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 4.3删除数据</span></span><br><span class="line">  <span class="keyword">await</span> userRepository.remove(user);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、修改数据"><a href="#四、修改数据" class="headerlink" title="四、修改数据"></a>四、修改数据</h2><ul>
<li><p>1、修改数据也是先查询出来,然后修改后，保存到数据库中</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.修改数据</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> userRepository.findOne(<span class="number">2</span>);</span><br><span class="line">user.password = <span class="string">&#x27;23456&#x27;</span>;</span><br><span class="line"><span class="keyword">await</span> userRepository.save(user);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs(五)</title>
    <url>/2020/09/09/nestjs-%E4%BA%94/</url>
    <content><![CDATA[<p>前面的章节中我们仅仅是讲解了<code>TypeORM</code>的使用,如何将<code>TypeORM</code>在<code>Nestjs</code>中使用将在本章节讲解</p>
<h2 id="一、配置步骤"><a href="#一、配置步骤" class="headerlink" title="一、配置步骤"></a>一、配置步骤</h2><ul>
<li><p>1、<a href="https://docs.nestjs.com/techniques/database">官网地址</a></p>
</li>
<li><p>2、安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save @nestjs/typeorm typeorm mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、创建一个<code>user</code>的模块</p>
</li>
<li><p>4、直接在<code>app.module.ts</code>中配置数据库的文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    TypeOrmModule.forRoot(&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">      <span class="attr">database</span>: <span class="string">&#x27;typeorm_mysql&#x27;</span>,</span><br><span class="line">      <span class="attr">synchronize</span>: <span class="literal">true</span>, <span class="comment">// 自动同步数据模型到数据表中</span></span><br><span class="line">      <span class="attr">logging</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">entities</span>: [</span><br><span class="line">        __dirname + <span class="string">&#x27;/**/*.entity&#123;.ts,.js&#125;&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    UserModule,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、在<code>user</code>的模块下创建一个<code>user.entity.ts</code>的实体类(可以直接复制上一章节的代码过来)</p>
</li>
<li><p>6、<strong><font color="#f00">最重要的一点,自己创建的实体类要对应的模块中加载进来</font></strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    TypeOrmModule.forFeature([ <span class="comment">// 这步骤是不能少的</span></span><br><span class="line">      UserEntity,</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、结合控制层和服务层测试将数据插入到数据库并且取出数据"><a href="#二、结合控制层和服务层测试将数据插入到数据库并且取出数据" class="headerlink" title="二、结合控制层和服务层测试将数据插入到数据库并且取出数据"></a>二、结合控制层和服务层测试将数据插入到数据库并且取出数据</h2><ul>
<li><p>1、创建控制器和服务层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建控制层</span></span><br><span class="line">nest g co modules/user --no-spec</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建服务层</span></span><br><span class="line">nest g s modules/user --no-spec </span><br></pre></td></tr></table></figure>
</li>
<li><p>2、在服务层中写一个新增数据和查询数据的方法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InjectRepository &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Repository &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; UserEntity &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(UserEntity)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userRepository: Repository&lt;UserEntity&gt;</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建数据,传递一个对象类型的数据</span></span><br><span class="line">  <span class="keyword">async</span> createUser(data: &#123; [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;): <span class="built_in">Promise</span>&lt;UserEntity&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.save(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询全部的数据</span></span><br><span class="line">  <span class="keyword">async</span> userList(): <span class="built_in">Promise</span>&lt;UserEntity[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userRepository.find();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、控制层中用来接收客户端的请求,对接服务层</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService,</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> createUser(</span><br><span class="line">    <span class="meta">@Body</span>() data: &#123; [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">  ): <span class="built_in">Promise</span>&lt;UserEntity&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userService.createUser(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> userList(): <span class="built_in">Promise</span>&lt;UserEntity[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userService.userList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>4、使用<code>postman</code>测试接口</p>
</li>
<li><p>5、<a href="https://github.com/kuangshp/nest-book-code/tree/18.nest_mysql">本章节的代码</a></p>
</li>
</ul>
<h2 id="三、配合-env文件及数据迁移脚本来更改数据库表结构"><a href="#三、配合-env文件及数据迁移脚本来更改数据库表结构" class="headerlink" title="三、配合.env文件及数据迁移脚本来更改数据库表结构"></a>三、配合<code>.env</code>文件及数据迁移脚本来更改数据库表结构</h2><blockquote>
<p>官网上也有相关的例子:配置<code>ormconfig.json</code>到根目录下,这个在之前的版本上我是配置成功了,在现在的版本上似乎有点小问题。本人也折腾了好久,感觉下面介绍的方法还是比较靠谱的，只要基本配置就可以。</p>
</blockquote>
<ul>
<li><p>1、安装依赖包并且在<code>main.ts</code>中引入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br><span class="line">npm install @types/dotenv -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、安装获取配置文件的依赖包,<a href="https://docs.nestjs.com/techniques/configuration">官网上讲的是这个包</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install nestjs-config</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、在根目录下创建一个<code>.env</code>的文件存放数据库连接的基本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DB_TYPE=mysql</span><br><span class="line">DB_HOST=localhost</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=123456</span><br><span class="line">DB_DATABASE=typeorm_mysql</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_LOGGING=true</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、在根目录下创建一个<code>ormconfig.js</code>的文件(仅仅是用来做数据迁移的)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: process.env.DB_TYPE,</span><br><span class="line">    <span class="attr">host</span>: process.env.DB_HOST,</span><br><span class="line">    <span class="attr">port</span>: <span class="built_in">Number</span>(process.env.DB_PORT),</span><br><span class="line">    <span class="attr">database</span>: process.env.DB_DATABASE,</span><br><span class="line">    <span class="attr">username</span>: process.env.DB_USERNAME,</span><br><span class="line">    <span class="attr">password</span>: process.env.DB_PASSWORD,</span><br><span class="line">    <span class="attr">logging</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">entities</span>: [</span><br><span class="line">      <span class="string">&#x27;src/entity/**/*.entity.&#123;ts,js&#125;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;src/modules/**/*.entity.&#123;ts,js&#125;&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">migrations</span>: [</span><br><span class="line">      <span class="string">&#x27;src/migration/*.ts&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">subscribers</span>: [</span><br><span class="line">      <span class="string">&#x27;src/subscriber/**/*.ts&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">cli</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;entitiesDir&#x27;</span>: <span class="string">&#x27;src/entity&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;migrationsDir&#x27;</span>: <span class="string">&#x27;src/migration&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;subscribersDir&#x27;</span>: <span class="string">&#x27;src/subscriber&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、根目录下创建一个<code>config/database.config.ts</code>的文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: process.env.DB_TYPE,</span><br><span class="line">  <span class="attr">host</span>: process.env.DB_HOST,</span><br><span class="line">  <span class="attr">port</span>: <span class="built_in">Number</span>(process.env.DB_PORT),</span><br><span class="line">  <span class="attr">database</span>: process.env.DB_DATABASE,</span><br><span class="line">  <span class="attr">username</span>: process.env.DB_USERNAME,</span><br><span class="line">  <span class="attr">password</span>: process.env.DB_PASSWORD,</span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、在<code>app.module.ts</code>的文件中使用<code>nestjs-config</code>来加载数据库的配置</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ConfigModule, ConfigService &#125; <span class="keyword">from</span> <span class="string">&#x27;nestjs-config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="comment">// 配置加载配置文件</span></span><br><span class="line">    ConfigModule.load(path.resolve(__dirname, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;**/!(*.d).&#123;ts,js&#125;&#x27;</span>), &#123;</span><br><span class="line">      <span class="attr">modifyConfigName</span>: <span class="function"><span class="params">name</span> =&gt;</span> name.replace(<span class="string">&#x27;.config&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// mysql的连接</span></span><br><span class="line">    TypeOrmModule.forRootAsync(&#123;</span><br><span class="line">      <span class="attr">useFactory</span>: <span class="keyword">async</span> (config: ConfigService) =&gt; (&#123;</span><br><span class="line">        <span class="attr">type</span>: config.get(<span class="string">&#x27;database.type&#x27;</span>),</span><br><span class="line">        <span class="attr">host</span>: config.get(<span class="string">&#x27;database.host&#x27;</span>),</span><br><span class="line">        <span class="attr">port</span>: config.get(<span class="string">&#x27;database.port&#x27;</span>),</span><br><span class="line">        <span class="attr">username</span>: config.get(<span class="string">&#x27;database.username&#x27;</span>),</span><br><span class="line">        <span class="attr">password</span>: config.get(<span class="string">&#x27;database.password&#x27;</span>),</span><br><span class="line">        <span class="attr">database</span>: config.get(<span class="string">&#x27;database.database&#x27;</span>),</span><br><span class="line">        <span class="attr">entities</span>: [__dirname + <span class="string">&#x27;/**/*.entity&#123;.ts,.js&#125;&#x27;</span>],</span><br><span class="line">        <span class="attr">logging</span>: config.get(<span class="string">&#x27;database.logging&#x27;</span>),</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">inject</span>: [ConfigService],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、在<code>package.json</code>文件中配置数据库迁移脚本(你可以记得住也不可以配置的)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;generate&quot;</span>: <span class="string">&quot;ts-node ./node_modules/.bin/typeorm migration:generate -n Test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;db&quot;</span>: <span class="string">&quot;ts-node ./node_modules/typeorm/cli.js migration:run&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>8、将<code>.env</code>文件添加到<code>.gitignore</code>文件中,不提交到<code>git</code>上面</p>
</li>
<li><p>9、当有实体类变动的时候就运行第七点的两个脚本,自动修改数据表结构,而不会造成数据的丢失</p>
</li>
<li><p>10、<a href="https://github.com/kuangshp/nest-book-code/tree/19.nest_mysql">本章节的代码</a></p>
</li>
</ul>
<h2 id="一、数据库中事务操作的必要性"><a href="#一、数据库中事务操作的必要性" class="headerlink" title="一、数据库中事务操作的必要性"></a>一、数据库中事务操作的必要性</h2><p>在数据库操作中,如果涉及到多表关联、多表有关系操作的时候,我们就要进行事务处理,以免一张表的数据已经发生了修改,刚好发生了异常,造成另外一张表的数据不进行更新。</p>
<p>常见场景</p>
<ul>
<li>两张表关联关系同时需要插入、删除数据</li>
<li>银行转换一个表数据减少另外一个表的数据增加</li>
</ul>
<h2 id="二、方式一、隐式commit-隐式rollback"><a href="#二、方式一、隐式commit-隐式rollback" class="headerlink" title="二、方式一、隐式commit,隐式rollback"></a>二、方式一、隐式<code>commit</code>,隐式<code>rollback</code></h2><ul>
<li><p>1、控制层的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Post()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params">@Body() data: Extract&lt;CreateUserDto, CreateUserExtendDto&gt;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.userService.create(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、服务层的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params">data: Extract&lt;CreateUserDto, CreateUserExtendDto&gt;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, password, email, mobile, gender, qq, address &#125; = data;</span><br><span class="line">  <span class="keyword">return</span> getManager()</span><br><span class="line">    .transaction(<span class="keyword">async</span> (entityManage: EntityManager) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> user: &#123; [propName: string]: any &#125; = <span class="keyword">await</span> entityManage.save(</span><br><span class="line">        UserEntity,</span><br><span class="line">        &#123;</span><br><span class="line">          name,</span><br><span class="line">          password,</span><br><span class="line">          email,</span><br><span class="line">          mobile,</span><br><span class="line">          gender,</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">//throw new Error(&#x27;主动抛出错误&#x27;);</span></span><br><span class="line">      <span class="keyword">await</span> entityManage.save(UserExtendEntity, &#123;</span><br><span class="line">        <span class="attr">userId</span>: user.id,</span><br><span class="line">        qq,</span><br><span class="line">        address,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;创建成功&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;创建失败&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、显式的使用commit和rollback"><a href="#三、显式的使用commit和rollback" class="headerlink" title="三、显式的使用commit和rollback"></a>三、显式的使用<code>commit</code>和<code>rollback</code></h2><ul>
<li><p>1、控制层的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Post()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params">@Body() data: Extract&lt;CreateUserDto, CreateUserExtendDto&gt;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.userService.create(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、服务层的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params">data: Extract&lt;CreateUserDto, CreateUserExtendDto&gt;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, password, email, mobile, gender, qq, address &#125; = data;</span><br><span class="line">  <span class="keyword">const</span> connection = getConnection();</span><br><span class="line">  <span class="keyword">const</span> queryRunner = connection.createQueryRunner();</span><br><span class="line">  <span class="keyword">await</span> queryRunner.connect();</span><br><span class="line">  <span class="keyword">await</span> queryRunner.startTransaction();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 注意如果这个地方使用save是不行的</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> queryRunner.manager.insert&lt;UserEntity&gt;(UserEntity, &#123;</span><br><span class="line">      name,</span><br><span class="line">      password,</span><br><span class="line">      email,</span><br><span class="line">      mobile,</span><br><span class="line">      gender,</span><br><span class="line">    &#125;);</span><br><span class="line">    Logger.log(<span class="built_in">JSON</span>.stringify(user), <span class="string">&#x27;插入user的数据&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> userId = user.identifiers[<span class="number">0</span>].id;</span><br><span class="line">    <span class="keyword">await</span> queryRunner.manager.insert&lt;UserExtendEntity&gt;(UserExtendEntity, &#123;</span><br><span class="line">      userId,</span><br><span class="line">      qq,</span><br><span class="line">      address,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">await</span> queryRunner.commitTransaction();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;创建成功&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">await</span> queryRunner.rollbackTransaction();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&#x27;创建失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、方式三、在控制层中使用装饰器的方式-这种方式和第一种有点类似"><a href="#四、方式三、在控制层中使用装饰器的方式-这种方式和第一种有点类似" class="headerlink" title="四、方式三、在控制层中使用装饰器的方式(这种方式和第一种有点类似)"></a>四、方式三、在控制层中使用装饰器的方式(这种方式和第一种有点类似)</h2><ul>
<li><p>1、控制层的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Post()</span><br><span class="line">@Transaction()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  @Body() data: Extract&lt;CreateUserDto, CreateUserExtendDto&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  @TransactionManager() manager: EntityManager,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.userService.create(data, manager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、在服务层中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  data: Extract&lt;CreateUserDto, CreateUserExtendDto&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  manager: EntityManager,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, password, email, mobile, gender, qq, address &#125; = data;</span><br><span class="line">  <span class="keyword">const</span> user: &#123; [propName: string]: any &#125; = <span class="keyword">await</span> manager.save(UserEntity, &#123;</span><br><span class="line">    name,</span><br><span class="line">    password,</span><br><span class="line">    email,</span><br><span class="line">    mobile,</span><br><span class="line">    gender,</span><br><span class="line">  &#125;);</span><br><span class="line">  Logger.log(<span class="built_in">JSON</span>.stringify(user), <span class="string">&#x27;当前用户&#x27;</span>);</span><br><span class="line">  <span class="comment">// throw new Error(&#x27;错误了&#x27;) // 测试主动抛出异常是否回滚</span></span><br><span class="line">  <span class="keyword">await</span> manager.save(UserExtendEntity, &#123;</span><br><span class="line">    <span class="attr">userId</span>: user.id,</span><br><span class="line">    qq,</span><br><span class="line">    address,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;创建成功&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx (一)</title>
    <url>/2020/04/04/nginx-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="nginx-应用场景"><a href="#nginx-应用场景" class="headerlink" title="nginx 应用场景"></a>nginx 应用场景</h1><ul>
<li>静态资源服务器</li>
<li>反向代理服务</li>
<li>API接口服务</li>
</ul>
<h1 id="nginx-优势"><a href="#nginx-优势" class="headerlink" title="nginx 优势"></a>nginx 优势</h1><ul>
<li>高并发高性能</li>
<li>可扩展性好</li>
<li>高可靠性</li>
<li>热布置(可平滑升级)</li>
<li>开源许可证</li>
</ul>
<h1 id="nginx-架构"><a href="#nginx-架构" class="headerlink" title="nginx 架构"></a>nginx 架构</h1><ul>
<li>轻量<ul>
<li>源代码只包含核心模块</li>
<li>其它非核心功能都是通过模块实现，可以自由选择</li>
</ul>
</li>
<li>架构<ul>
<li>Nginx 采用的是多进程（单线程）和多线路IO复用模型</li>
</ul>
</li>
<li>工作流程</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs(四)</title>
    <url>/2020/09/08/nestjs-%E5%9B%9B/</url>
    <content><![CDATA[<p>前面我们仅仅介绍了<code>TypeORM</code>对数据的增、删、改操作,一直未提查询数据的方法,用也仅仅是用了<code>find</code>和<code>findOne</code>的基本使用方式,因为我们在实际开发中80%的对数据库操作都是在查询数据,以下将重点介绍查询数据</p>
<h2 id="一、find的基本使用"><a href="#一、find的基本使用" class="headerlink" title="一、find的基本使用"></a>一、<code>find</code>的基本使用</h2><ul>
<li><p>1、全部查询所有的字段</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.查询全部的字段</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、使用<code>select</code>选择性的查询想要的字段</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123; <span class="attr">select</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、使用<code>where</code>条件查询</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.使用where条件查询</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> user.id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、使用<code>where</code>多条件<code>and</code>的关系查询数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">&#x27;xx&#x27;</span> &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> user.id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> user.username <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、使用<code>where</code>多条件<code>or</code>的关系查询数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.使用where..or查询数据</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123; <span class="attr">where</span>: [&#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">username</span>: <span class="string">&#x27;xx&#x27;</span> &#125;] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> user.id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> user.username <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、<code>relations</code>关系查询(<font color="#f00">前提是要先有外键关联关系</font>)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.relations关系查询</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123; <span class="attr">relations</span>: [<span class="string">&#x27;userDetail&#x27;</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.<span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">as</span> a <span class="keyword">left</span> <span class="keyword">join</span> user_extend <span class="keyword">as</span> b <span class="keyword">on</span> a.id <span class="operator">=</span> b.userId;</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、使用<code>join</code>关系查询(对<code>relations</code>的扩展)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7.使用join</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123;</span><br><span class="line">    <span class="attr">join</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">leftJoinAndSelect</span>: &#123;</span><br><span class="line">            <span class="attr">detail</span>: <span class="string">&#x27;user.userDetail&#x27;</span>,</span><br><span class="line">            <span class="attr">posts</span>: <span class="string">&#x27;user.posts&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>
</li>
<li><p>8、<code>order</code>排序查询</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123;</span><br><span class="line">    <span class="attr">order</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;DESC&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;ASC&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> username <span class="keyword">asc</span>, id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>9、分页查询数据</p>
<ul>
<li><code>skip</code>偏移(表示从哪里开始)</li>
<li><code>take</code>查询多少条数据</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9.分页查询</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123;</span><br><span class="line">    <span class="attr">skip</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">take</span>: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、Find的进阶选项"><a href="#二、Find的进阶选项" class="headerlink" title="二、Find的进阶选项"></a>二、<code>Find</code>的进阶选项</h2><p><code>TypeORM</code>提供了许多内置运算符，可用于创建更复杂的查询：</p>
<ul>
<li><p>1、<code>Not</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10.Not</span></span><br><span class="line"><span class="keyword">const</span> userRepository = connection.getRepository(User);</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> userRepository.find(&#123;</span><br><span class="line">    <span class="attr">username</span>: Not(<span class="string">&#x27;王五&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>执行的<code>SQL</code>类似 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">!=</span> <span class="string">&#x27;王五&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、<code>LessThan</code>小于,一般用于数字</p>
</li>
<li><p>3、<code>LessThanOrEqual</code>小于或者等于</p>
</li>
<li><p>4、<code>MoreThan</code>大于</p>
</li>
<li><p>5、<code>MoreThanOrEqual</code>大于等于</p>
</li>
<li><p>6、<code>Equal</code>等于</p>
</li>
<li><p>7、<code>Like</code>模糊查询 <code>xx: LIKE(&#39;%yy%&#39;)</code></p>
</li>
<li><p>8、<code>Between</code>两个范围之间<code>xx: Between(1,10)</code></p>
</li>
<li><p>9、<code>In</code>在什么里面<code>xx: In([&#39;&#39;,&#39;&#39;])</code></p>
</li>
<li><p>10、上面的可以多个组合起来一起使用</p>
</li>
</ul>
<h2 id="三、TypeORM不仅仅提供Find方法-还有一系列的方法"><a href="#三、TypeORM不仅仅提供Find方法-还有一系列的方法" class="headerlink" title="三、TypeORM不仅仅提供Find方法,还有一系列的方法"></a>三、<code>TypeORM</code>不仅仅提供<code>Find</code>方法,还有一系列的方法</h2><ul>
<li>1、<code>find</code>查找返回一个数组</li>
<li>2、<code>findOne</code>查询返回一个对象,直接传递一个数字进去,会根据<code>id</code>去查询</li>
<li>3、<code>findAndCount</code>查询返回数量<code>[data, count]</code></li>
<li>4、<code>findByIds([])</code>根据<code>id</code>数组查询</li>
</ul>
<h2 id="四、本章节代码"><a href="#四、本章节代码" class="headerlink" title="四、本章节代码"></a>四、<a href="https://github.com/kuangshp/nest-book-code/tree/15.find">本章节代码</a></h2><h2 id="一、什么是QueryBuilder"><a href="#一、什么是QueryBuilder" class="headerlink" title="一、什么是QueryBuilder"></a>一、什么是<code>QueryBuilder</code></h2><p><code>QueryBuilder</code>是<code>TypeORM</code>最强大的功能之一 ,它允许你使用优雅便捷的语法构建<code>SQL</code>查询，执行并获得自动转换的实体。也是进行复杂查询必使用的技能之一。</p>
<h2 id="二、创建QueryBuilder的几种方式"><a href="#二、创建QueryBuilder的几种方式" class="headerlink" title="二、创建QueryBuilder的几种方式"></a>二、创建<code>QueryBuilder</code>的几种方式</h2><ul>
<li><p>1、使用<code>connection</code>创建方式一</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createConnection, getConnection &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">&quot;./entity/User&quot;</span>;</span><br><span class="line"></span><br><span class="line">createConnection().then(<span class="keyword">async</span> connection =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1.使用connection创建</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> getConnection()</span><br><span class="line">    .createQueryBuilder()</span><br><span class="line">    .select([<span class="string">&#x27;user.id&#x27;</span>, <span class="string">&#x27;user.username&#x27;</span>]) <span class="comment">// 需要选择查询的字段,如果想要全部查询可以不加select</span></span><br><span class="line">    .from(User, <span class="string">&#x27;user&#x27;</span>) <span class="comment">// 从哪张表,并且定义别名为user</span></span><br><span class="line">    .where(<span class="string">&#x27;(user.id=:id)&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;) <span class="comment">// 过滤条件</span></span><br><span class="line">    .getOne(); <span class="comment">// 查询一个</span></span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、使用<code>connection</code>创建方式二</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.使用connection创建</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder(User, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  .select([<span class="string">&#x27;user.id&#x27;</span>, <span class="string">&#x27;user.username&#x27;</span>])</span><br><span class="line">  .where(<span class="string">&#x27;(user.id=:id)&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  .getOne();</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、使用<code>entity manager</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.使用entity manager创建</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> getManager()</span><br><span class="line">  .createQueryBuilder(User, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  .select(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  .getMany();</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、使用<code>repository</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.使用repository创建</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> getRepository(User)</span><br><span class="line">  .createQueryBuilder(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  .getMany();</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、QueryBuilder五种类型"><a href="#三、QueryBuilder五种类型" class="headerlink" title="三、QueryBuilder五种类型"></a>三、<code>QueryBuilder</code>五种类型</h2><ul>
<li><p>1、查询数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder(User, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  .select([<span class="string">&#x27;user.id&#x27;</span>, <span class="string">&#x27;user.username&#x27;</span>])</span><br><span class="line">  .where(<span class="string">&#x27;(user.id=:id)&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  .getOne();</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、插入数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder()</span><br><span class="line">  .insert() <span class="comment">// 插入数据的时候要指明插入到那个实体类</span></span><br><span class="line">  .into(User)</span><br><span class="line">  .values([&#123; <span class="attr">username</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;1234&#x27;</span> &#125;, &#123; <span class="attr">username</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;12345&#x27;</span> &#125;])</span><br><span class="line">  .execute();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、更新数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder()</span><br><span class="line">  .update(User)</span><br><span class="line">  .set(&#123; <span class="attr">username</span>: <span class="string">&#x27;哈哈哈&#x27;</span> &#125;)</span><br><span class="line">  .where(<span class="string">&#x27;id=:id&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  .execute();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、删除数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder()</span><br><span class="line">  .delete()</span><br><span class="line">  .from(User)</span><br><span class="line">  .where(<span class="string">&#x27;id=:id&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;)</span><br><span class="line">  .execute();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li>
<li><p>5、创建关系查询</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建关系查询</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder(User, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  <span class="comment">// 第一个参数是定义字段,第二个实体类,第三个是别名,第四个是条件</span></span><br><span class="line">  .leftJoinAndMapMany(<span class="string">&#x27;user.posts&#x27;</span>, Posts, <span class="string">&#x27;posts&#x27;</span>, <span class="string">&#x27;user.id=posts.userId&#x27;</span>)</span><br><span class="line">  .getMany();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(result));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、查询数据方法"><a href="#四、查询数据方法" class="headerlink" title="四、查询数据方法"></a>四、查询数据方法</h2><ul>
<li><p>1、<code>getOne</code>查询一条数据</p>
</li>
<li><p>2、<code>getMany</code>查询多条数据</p>
</li>
<li><p>3、<code>getRawOne</code>使用聚合函数的时候下查询一条数据</p>
</li>
<li><p>4、<code>getRawMany</code>使用聚合函数的时候下查询多条数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> getConnection()</span><br><span class="line">  .createQueryBuilder(User, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  <span class="comment">// 使用了聚合函数就要使用getRawOne或者getRawMany方法</span></span><br><span class="line">  .select(<span class="string">&#x27;SUM(user.id)&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">  .getRawOne();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="五、传递参数"><a href="#五、传递参数" class="headerlink" title="五、传递参数"></a>五、传递参数</h2><ul>
<li><p>1、直接使用</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">.where(<span class="string">&quot;user.username = :username&quot;</span>, &#123; <span class="attr">username</span>: <span class="string">&quot;哈哈&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、使用<code>setParameter</code>填充值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">.where(<span class="string">&quot;user.username = :username&quot;</span>)</span><br><span class="line">.setParameter(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;哈哈&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、<code>LIKE</code>模糊查询</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">.where(<span class="string">&quot;user.username like :username&quot;</span>, &#123;<span class="attr">username</span>: <span class="string">`% <span class="subst">$&#123;username&#125;</span> %`</span>&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、<code>IN</code>查询</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">.where(<span class="string">&quot;user.username IN (:...username)&quot;</span>, &#123; <span class="attr">username</span>: [ <span class="string">&quot;Timber&quot;</span>, <span class="string">&quot;Cristal&quot;</span>, <span class="string">&quot;Lina&quot;</span> ] &#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、本章节参考代码"><a href="#六、本章节参考代码" class="headerlink" title="六、本章节参考代码"></a>六、<a href="https://github.com/kuangshp/nest-book-code/tree/16.queryBuilder">本章节参考代码</a></h2><hr>
<p>前面我们使用<code>synchronize=true</code>同步实体类到数据表中,在实际开发中你可能会多次更改实体类,但是数据库已经有数据了,你也不可能先删除之前的数据表,然后再来同步,上线后的项目也会把同步功能关闭。以避免生产的数据被删除。解决方式有</p>
<ul>
<li>1、手动写<code>SQL</code>语句增加列到数据表中,然后再实体类中添加对应的字段值。对于没<code>SQL</code>基础的同学来说可能有点难度</li>
<li>2、采用手动迁移的方式,如果你曾经用过<code>django</code>的,就知道这功能。直接写好实体类,简单运行几个命令就同步到数据库</li>
</ul>
<h2 id="一、配置命令"><a href="#一、配置命令" class="headerlink" title="一、配置命令"></a>一、配置命令</h2><blockquote>
<p>可能你记住不那么多命令,但是我们<code>node</code>项目都可以把命令配置到<code>package.json</code>文件</p>
</blockquote>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;ts-node src/index.ts&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;generate&quot;</span>: <span class="string">&quot;ts-node  ./node_modules/typeorm/cli.js migration:generate -n Test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;db&quot;</span>: <span class="string">&quot;ts-node ./node_modules/typeorm/cli.js migration:run&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1、我们每次修改实体类的时候先后运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意顺序执行</span></span><br><span class="line">npm run generate</span><br><span class="line">npm run db</span><br></pre></td></tr></table></figure></li>
<li><p>2、<a href="https://github.com/kuangshp/nest-book-code/tree/17.migration">代码参考</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2020/06/11/promise/</url>
    <content><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><blockquote>
<p>解决并发问题 （同步多个异步方法的执行结果）<br>Promise是一个类</p>
</blockquote>
<ul>
<li>每次new一个promise 都需要传递一个执行器， 执行器立即执行</li>
<li>执行器函数中有两个参数 resolve, reject</li>
<li>链式调用的问题 （先获取name, 通过name再获取age）解决多个回调嵌套的问题</li>
<li>默认promise 有三个状态 pendding -&gt; resolve 表示成功了fulfilled reject表示拒绝 rejected</li>
<li>如果一旦成功不 不能变失败； 一旦失败 不能再变成功</li>
<li>每个promise 都有一个then方法<blockquote>
<p>链式调用</p>
</blockquote>
</li>
<li>如果返回一个普通值 会走下一个then的成功</li>
<li>抛出错误 then的失败方法</li>
<li>如果返回 promise 就让promise执行采用他的状态</li>
<li>返回一个新promise来实现链式调用<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> school = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> after = <span class="function">(<span class="params">times, fn</span>) =&gt;</span> --times === <span class="number">0</span> &amp;&amp; fn()</span><br><span class="line"><span class="keyword">let</span> newAfter = after(<span class="number">2</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(school)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">&#x27;name.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&#x27;name&#x27;</span>] = data</span><br><span class="line">  newAfter()</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">&#x27;age.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&#x27;age&#x27;</span>] = data</span><br><span class="line">  newAfter()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> school = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> e = &#123;</span><br><span class="line">  <span class="attr">arr</span>:[],</span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.arr.push(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.arr.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">e.on(<span class="function">() =&gt;</span> &#123; <span class="comment">// 订阅</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.on(<span class="function">() =&gt;</span> &#123; <span class="comment">// 订阅</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(school).length === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(school)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;name.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&#x27;name&#x27;</span>] = data</span><br><span class="line">  e.emit() <span class="comment">// 发布</span></span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">&#x27;age.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  school[<span class="string">&#x27;age&#x27;</span>] = data</span><br><span class="line">  e.emit() <span class="comment">// 发布</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="手写promise"><a href="#手写promise" class="headerlink" title="手写promise"></a>手写promise</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING   = <span class="string">&#x27;PENDING&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;FULFILLED&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED  = <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.value;</span><br><span class="line">		<span class="built_in">this</span>.reason;</span><br><span class="line">        <span class="built_in">this</span>.status = <span class="string">&#x27;PENDING&#x27;</span> <span class="comment">// 记录3个状态， 默认pending</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallBacks = []</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallBacks = []</span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 只有是panding状态才能改变状态</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.value = value</span><br><span class="line">                <span class="built_in">this</span>.status = <span class="string">&#x27;FULFILLED&#x27;</span></span><br><span class="line">                <span class="built_in">this</span>.onResolvedCallBacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn()) <span class="comment">// 发布</span></span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.reason = reason</span><br><span class="line">                <span class="built_in">this</span>.status = <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">                <span class="built_in">this</span>.onRejectedCallBacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn()) <span class="comment">// 发布</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里可能会发生异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1。执行器立即执行</span></span><br><span class="line">            executor(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例方法 判断当前的状态</span></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">            onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">            onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果还是pending状态就订阅</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onResolvedCallBacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">this</span>.onRejectedCallBacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端架构</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 全局安装路径修改</title>
    <url>/2021/01/13/npm-%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h1 id="NPM修改默认全局安装路径"><a href="#NPM修改默认全局安装路径" class="headerlink" title="NPM修改默认全局安装路径"></a>NPM修改默认全局安装路径</h1><blockquote>
<p>有段时间没用npm了，昨天打算用vue-cli来新建个项目，yarn global add @vue/cli 之后，粗大事了。vue命令不可用，显示未安装。各种折腾，后来发现问题所在，今天写出来，一方面提醒自己，一方面利于他人。<br>首先，默认的全局安装路径，我忘了，哈哈，因为很久之前自己小手一抖，改过了，即使重装nodejs，都不能复原到默认路径（这一点好蛋疼）<br>其次，因为我重新安装了nodejs，所以在我用yarn安装后，无法安装到npm指定的地方，虽然yarn config get prefix得到的路径和npm config get prefix是一样的，但是安装的时候还有安装到了nodejs/bin文件下，在nodejs/node_modules下并没有<br>最后，说一下完整的设置方法：(我的nodejs安装路径为D:\nodejs)</p>
</blockquote>
<hr>
<ul>
<li>在D:\nodejs文件中新建文件夹node_cache，而后打开cmd，npm config set cache “D:\nodejs\node_cache”</li>
<li>继续在cmd中运行 npm config set prefix “D:\nodejs”，这里面本来就有node_modules文件夹了，全局安装时，会自动找这个文件夹，所以不用我们手动新建文件夹</li>
<li>修改D:\nodejs\node_modules\npm\npmrc 文件为 prefix=D:\nodejs。这个时候，全局安装后，使用时，才能真正的从我们设置的地方找，也就不会出现安装完，使用不了的情况了</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义指令</title>
    <url>/2020/04/02/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h1><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html">Vue自定义指令</a></p>
<h1 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h1><ul>
<li>全局</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>局部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  <span class="attr">focus</span>: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p>
<ul>
<li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>
<li><code>inserted</code>: 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>
<li><code>update</code>: 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li>
<li><code>componentUpdated</code>：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>
<li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li>
</ul>
<hr>
<h1 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h1><ul>
<li><code>el</code>: 指令所绑定的元素，可以用来直接操作 DOM。真实DOM元素</li>
<li><code>binding</code>：一个对象，包含以下属性：<ul>
<li><code>name</code>：指令名，不包括 v- 前缀。</li>
<li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 2。</li>
<li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>
<li><code>expression</code>：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li>
<li><code>arg</code>：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li>
<li><code>modifiers</code>：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li>
</ul>
</li>
<li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li>
<li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hook-arguments-example&quot;</span> <span class="attr">v-demo:foo.a.b</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;demo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify</span><br><span class="line">    el.innerHTML =</span><br><span class="line">      <span class="string">&#x27;name: &#x27;</span>       + s(binding.name) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;value: &#x27;</span>      + s(binding.value) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;expression: &#x27;</span> + s(binding.expression) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;argument: &#x27;</span>   + s(binding.arg) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;modifiers: &#x27;</span>  + s(binding.modifiers) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;vnode keys: &#x27;</span> + <span class="built_in">Object</span>.keys(vnode).join(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#hook-arguments-example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。</p>
</blockquote>
<hr>
<h1 id="动态指令参数"><a href="#动态指令参数" class="headerlink" title="动态指令参数"></a>动态指令参数</h1><p>指令的参数可以是动态的。例如，在 <code>v-mydirective:[argument]=&quot;value&quot;</code> 中，<code>argument</code> 参数可以根据组件实例数据进行更新！这使得自定义指令可以在应用中被灵活使用。</p>
<p>例如你想要创建一个自定义指令，用来通过固定布局将元素固定在页面上。我们可以像这样创建一个通过指令值来更新竖直位置像素值的自定义指令：</p>
<h1 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;color-swatch&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h1><p>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令函数能够接受所有合法的 JavaScript 表达式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;demo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.color) <span class="comment">// =&gt; &quot;white&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.text)  <span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="ts编写vue-clickOutside自定义指令"><a href="#ts编写vue-clickOutside自定义指令" class="headerlink" title="ts编写vue clickOutside自定义指令"></a>ts编写vue clickOutside自定义指令</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DirectiveOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickOutside:DirectiveOptions = &#123;</span><br><span class="line">  bind (el, binding, vnode) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">documentHandler</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (el.contains(e.target)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (binding.expression) &#123;</span><br><span class="line">              binding.value(e);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      (el <span class="keyword">as</span> <span class="built_in">any</span>).__vueClickOutside__ = documentHandler;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, documentHandler);</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind (el, binding) &#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, (el <span class="keyword">as</span> <span class="built_in">any</span>).__vueClickOutside__);</span><br><span class="line">    <span class="keyword">delete</span> (el <span class="keyword">as</span> <span class="built_in">any</span>).__vueClickOutside__;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> clickOutside</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-select</span> <span class="attr">style</span>=<span class="string">&quot;width: 80px&quot;</span> <span class="attr">v-click-outside</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Vue, Component, Prop, Emit&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span><br><span class="line"><span class="keyword">import</span> clickOutside <span class="keyword">from</span> <span class="string">&#x27;@/lib/script/clickOutside&#x27;</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    clickOutside</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BirthdaySelect</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">no</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义指令扩展</title>
    <url>/2020/04/02/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="实现介绍"><a href="#实现介绍" class="headerlink" title="实现介绍"></a>实现介绍</h3><p>主要就是利用vue指令的功能，获取所绑定元素的dom对象dom_A以及传递过来的回调方法fun_A，然后监听浏览器的mousedown和mouseup事件(mousedown作为辅助信息，真正触发传递的回调方法的是mouseup事件)，当前事件中鼠标位置对应的dom对象dom_B不属于dom_A，则代表鼠标点击了dom_A外部，触发clickoutside回调方法。</p>
<h3 id="扩展介绍"><a href="#扩展介绍" class="headerlink" title="扩展介绍"></a>扩展介绍</h3><p>理论上clickoutside只能也只需要绑定一个元素作为inside，但是一些特殊的原因(可能是代码不够好)，要求clickoutside可以选定多个元素作为inside，当鼠标点击了这些元素所构成的inside的外部时，再触发事件。<br>结合下图，A与B两个元素作为一个inside，当鼠标点击在click1位置时，触发clickoutside，当鼠标点击click2或者click3位置时都不触发clickoutside。<br><img src="https://image-static.segmentfault.com/410/817/4108174745-5ac75d12a0d4d_articlex" alt="avatar"></p>
<h3 id="扩展实现"><a href="#扩展实现" class="headerlink" title="扩展实现"></a>扩展实现</h3><p>要实现上述功能，就必须获取到A和B的dom对象，然后在原先鼠标事件的监听的基础上，判断鼠标位置是否都不包含在A和B中，如果是的话再触发clickoutside。<br>实现方式为，在A和B的父级parent元素上绑定<code>v-clickoutside:yourClassName=&quot;handleClickOutside&quot;</code>，在A和B元素上添加同一个class样式，样式名称与指令冒号后面内容一致<code>class=&quot;yourClassName&quot;</code>。主要在处理指令绑定时，通过binding.arg即可获取到A和B共有的class，存放在dom变量中。在鼠标放开触发事件处理时，通过class获取到他们的dom对象。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-clickoutside:exactAreaClassName</span>=<span class="string">&quot;handleClickOutside&quot;</span>&gt;</span></span><br><span class="line">    Parent</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;exactAreaClassName&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;exactAreaClassName&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue用以判断当前运行环境</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// element封装的一些常用dom操作，这里on可以先当做是addEventListener的封装</span></span><br><span class="line"><span class="keyword">import</span> &#123; on &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/dom&#x27;</span></span><br><span class="line"><span class="comment">// 所有绑定了clickoutside指令的元素的dom对象数组</span></span><br><span class="line"><span class="keyword">const</span> nodeList = []</span><br><span class="line"><span class="comment">// 用来做存放于dom对象中clickoutside相关参数对象的key</span></span><br><span class="line"><span class="keyword">const</span> ctx = <span class="string">&#x27;@@clickoutsideContext&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> startClick</span><br><span class="line"><span class="keyword">let</span> seed = <span class="number">0</span></span><br><span class="line"><span class="comment">// 鼠标按下时，记录此时事件信息</span></span><br><span class="line">!Vue.prototype.$isServer &amp;&amp; on(<span class="built_in">document</span>, <span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> (startClick = e))</span><br><span class="line"><span class="comment">// 鼠标松开时候，遍历绑定clickoutside的节点，进行判断是否在节点外部以触发回调</span></span><br><span class="line">!Vue.prototype.$isServer &amp;&amp; on(<span class="built_in">document</span>, <span class="string">&#x27;mouseup&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  nodeList.forEach(<span class="function"><span class="params">node</span> =&gt;</span> node[ctx].documentHandler(e, startClick))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否在特殊限定范围内</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ifInExact</span> (<span class="params">exactElms, target1, taget2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; exactElms.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> elm = exactElms[i]</span><br><span class="line">    <span class="keyword">if</span> (elm.contains(target1) || elm.contains(taget2) || elm === target1) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否有特殊限定范围</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ifHasExact</span> (<span class="params">el, exactArea</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!exactArea) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> el.getElementsByClassName(exactArea)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDocumentHandler</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">mouseup = &#123;&#125;, mousedown = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!vnode ||</span><br><span class="line">      !vnode.context ||</span><br><span class="line">      !mouseup.target ||</span><br><span class="line">      !mousedown.target ||</span><br><span class="line">      (vnode.context.popperElm &amp;&amp;</span><br><span class="line">        (vnode.context.popperElm.contains(mouseup.target) ||</span><br><span class="line">          vnode.context.popperElm.contains(mousedown.target)))) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> exactElms = ifHasExact(el, el[ctx].exactArea)</span><br><span class="line">    <span class="comment">// 如果是有特殊限定范围的，则进行判断当前点击是否在 限定范围内</span></span><br><span class="line">    <span class="keyword">if</span> (exactElms) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ifInExact(exactElms, mouseup.target, mousedown.target)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 无特殊限定范围，则判断点击是否在默认的指令所在范围内</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (binding.expression &amp;&amp;</span><br><span class="line">      el[ctx].methodName &amp;&amp;</span><br><span class="line">      vnode.context[el[ctx].methodName]) &#123;</span><br><span class="line">      vnode.context[el[ctx].methodName]()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el[ctx].bindingFn &amp;&amp; el[ctx].bindingFn()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  bind (el, binding, vnode) &#123;</span><br><span class="line">    nodeList.push(el)</span><br><span class="line">    <span class="keyword">const</span> id = seed++</span><br><span class="line">    el[ctx] = &#123;</span><br><span class="line">      id,</span><br><span class="line">      <span class="attr">documentHandler</span>: createDocumentHandler(el, binding, vnode),</span><br><span class="line">      <span class="attr">methodName</span>: binding.expression,</span><br><span class="line">      <span class="attr">bindingFn</span>: binding.value,</span><br><span class="line">      <span class="comment">// 特殊限定范围的class，限定范围为该class的所有元素的并集</span></span><br><span class="line">      <span class="attr">exactArea</span>: binding.arg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  update (el, binding, vnode) &#123;</span><br><span class="line">    el[ctx].documentHandler = createDocumentHandler(el, binding, vnode)</span><br><span class="line">    el[ctx].methodName = binding.expression</span><br><span class="line">    el[ctx].bindingFn = binding.value</span><br><span class="line">    <span class="comment">// 附加 真正起作用部分</span></span><br><span class="line">    el[ctx].exactArea = binding.arg</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unbind (el) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = nodeList.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nodeList[i][ctx].id === el[ctx].id) &#123;</span><br><span class="line">        nodeList.splice(i, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> el[ctx]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端测试一</title>
    <url>/2021/06/02/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95%E4%B8%80/</url>
    <content><![CDATA[<h3 id="官网-test"><a href="#官网-test" class="headerlink" title="官网 test"></a>官网 test</h3><p><a href="https://jestjs.io/">官网</a><br><code>零配置</code>: Jest的目标是在大部分JavaScript项目上实现开箱即用，无需配置<br><code>快照</code>: 构建能够轻松追踪大Object的测试。快照可以独立于测试代码，也可以集成进代码行内。<br><code>隔离的</code>: 测试程序在自己的进程并行运算以最大限度地提高性能<br><code>优秀的 api</code>: 从it 到 expect - Jest将整个工具包放在一个地方。好书写，好维护，非常方便。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install jest@<span class="number">24.8</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>
<p>package.json 中的script添加如下代码：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;test&quot;</span>: <span class="string">&quot;jest&quot;</span></span><br></pre></td></tr></table></figure>
<p>match.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>match.test.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> match = <span class="built_in">require</span>(<span class="string">&#x27;./match.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;add&#125; = match;</span><br><span class="line">test(<span class="string">&#x27;测试加法 3 + 7&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(add(<span class="number">3</span>,<span class="number">7</span>)).toBe(<span class="number">10</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h3 id="配制"><a href="#配制" class="headerlink" title="配制"></a>配制</h3><p>暴露jest配制：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx jest --init</span><br></pre></td></tr></table></figure>

<p><img src="/img/jest/init.jpg" alt="配制jest"><br>此时可以看到有一个jest.config.js</p>
<p>测试覆盖率：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx jest --coverage</span><br></pre></td></tr></table></figure>
<p><img src="/img/jest/coverage.jpg" alt="测试覆盖率"></p>
<p><code>注意</code>: esModule模块引入需要用babel转换成commonjs规范</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @babel/core@7.4.5 @babel/preset-env@7.4.5 -D</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<ul>
<li>jest(babel-jest)</li>
<li>babel-core</li>
<li>取 .babelrc 配置</li>
<li>在运行测试之前， 结合babel, 选把你的代码做一次转化</li>
<li>运行转化过的测试用例代码</li>
</ul>
<h3 id="匹配器"><a href="#匹配器" class="headerlink" title="匹配器"></a>匹配器</h3><ul>
<li><p>toBe    引用相等</p>
</li>
<li><p>toEqual 内容相等</p>
</li>
<li><p>toBeNull 内容是不是null</p>
</li>
<li><p>toBeUndefined 未定义过</p>
</li>
<li><p>toBeDefined 被定义过</p>
</li>
<li><p>toBeTruthy 是不为真</p>
</li>
<li><p>toBeFalsy 是未为假</p>
</li>
<li><p>not 取反</p>
</li>
<li><p>boBeCreaterThan 比某个数大</p>
</li>
<li><p>boBeLessThan 比某个数小</p>
</li>
<li><p>boBeCreaterThanOrEqual 大于等于</p>
</li>
<li><p>boBeCloseTo 去浮点小数</p>
</li>
</ul>
<blockquote>
<p>String</p>
</blockquote>
<ul>
<li>boMatch 包含 可以用正则</li>
</ul>
<blockquote>
<p>Array, Set</p>
</blockquote>
<ul>
<li>toContain 包含</li>
<li>toThrow 抛出异常 抛错的内容一致</li>
</ul>
<blockquote>
<p>监控所有改动<br>package.json</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest --watchAll&quot;</span>, <span class="comment">// a 模式</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest --watch&quot;</span>, <span class="comment">// o 模式</span></span><br><span class="line">    <span class="attr">&quot;coverage&quot;</span>: <span class="string">&quot;jest --coverage&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>npm run test 出如下操作选项：<br>› Press <code>f</code> to run only failed tests.<br>› Press <code>o</code> to only run tests related to changed files.<br>› Press <code>p</code> to filter by a filename regex pattern.<br>› Press <code>t</code> to filter by a test name regex pattern.<br>› Press <code>q</code> to quit watch mode.<br>› Press <code>Enter</code> to trigger a test run.</p>
<h3 id="异步代码测试"><a href="#异步代码测试" class="headerlink" title="异步代码测试"></a>异步代码测试</h3><ul>
<li><p>回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchData = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;http://www.dell-lee.com/react/api/demo.json&#x27;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">         fn(response.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetchData.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">&#x27;./fetchData&#x27;</span>;</span><br><span class="line">test(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    fetchData(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(data).toEqual(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">true</span> </span><br><span class="line">        &#125;)</span><br><span class="line">        done();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>如果回调是promiss </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetchData().then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(response.data).toEqual(&#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果catch 加一局expect.assertions</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 404 response</span></span><br><span class="line">test(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect.assertions(<span class="number">1</span>); <span class="comment">// 至少一个expect</span></span><br><span class="line">    <span class="keyword">return</span> fetchData().catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(e.toString().indexOf(<span class="string">&#x27;404&#x27;</span>) &gt; -<span class="number">1</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> expect(fetchData()).resolves.toMatchObject(&#123;</span><br><span class="line">        <span class="attr">data</span>: &#123; <span class="attr">success</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;fetchData 返回结果 404&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> expect(fetchData()).rejects.toThrow();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async/await</span></span><br><span class="line">test(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> expect(fetchData()).resolves.toMatchObject(&#123;</span><br><span class="line">        <span class="attr">data</span>: &#123; <span class="attr">success</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;fetchData 返回结果 404&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> expect(fetchData()).rejects.toThrow();</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetchData()</span><br><span class="line">    expect(response.data).toEqual(&#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul>
<li>beforeAll</li>
<li>beforeEach</li>
<li>afterEach</li>
<li>afterAll</li>
</ul>
<blockquote>
<p>describe 分组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;测试所有Counter相关代码&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    describe(<span class="string">&#x27;测试增加相关的代码&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        test(<span class="string">&#x27;测试 Counter 中的 addOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;测试 Counter 中的 addOne 方法&#x27;</span>);</span><br><span class="line">            counter.addOne()</span><br><span class="line">            expect(counter.number).toBe(<span class="number">1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        test(<span class="string">&#x27;测试 Counter 中的 addTwo 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;测试 Counter 中的 addTwo 方法&#x27;</span>);</span><br><span class="line">            counter.addTwo()</span><br><span class="line">            expect(counter.number).toBe(<span class="number">2</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    describe(<span class="string">&#x27;测试减少相关的代码&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        test(<span class="string">&#x27;测试 Counter 中的 minusOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;测试 Counter 中的 minusOne 方法&#x27;</span>);</span><br><span class="line">            counter.minusOne()</span><br><span class="line">            expect(counter.number).toBe(-<span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        test(<span class="string">&#x27;测试 Counter 中的 minusTwo 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;测试 Counter 中的 minusTwo 方法&#x27;</span>);</span><br><span class="line">            counter.minusTwo()</span><br><span class="line">            expect(counter.number).toBe(-<span class="number">2</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/img/jest/describe.jpg" alt="describe分组"></p>
<h3 id="钩子函数的作用域"><a href="#钩子函数的作用域" class="headerlink" title="钩子函数的作用域"></a>钩子函数的作用域</h3><p>test.only() 只执行某条测试用例</p>
<h3 id="jest中的Mock"><a href="#jest中的Mock" class="headerlink" title="jest中的Mock"></a>jest中的Mock</h3><p>jest.fn() mock 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; runCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span>;</span><br><span class="line"><span class="comment">// error:</span></span><br><span class="line">test(<span class="string">&#x27;测试 runCallback&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    expect(runCallback(func)).toBe(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// right:</span></span><br><span class="line">test(<span class="string">&#x27;测试 runCallback&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = jest.fn(); <span class="comment">// mock 函数, 捕获函数的调用</span></span><br><span class="line">    runCallback(func);</span><br><span class="line">    expect(func).toBeCalled(); <span class="comment">// 函数是否被调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>func.mock:</p>
<ul>
<li>calls: [ [] ], 调用的情况 （参数）</li>
<li>instances: [ undefined ],  实例this的指向</li>
<li>invocationCallOrder: [ 1 ], 执行顺序</li>
<li>results: [ { type: ‘return’, value: undefined } ] 执行的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&#x27;测试 runCallback 调用 次数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = jest.fn();</span><br><span class="line">    runCallback(func);</span><br><span class="line">    runCallback(func);</span><br><span class="line">    runCallback(func);</span><br><span class="line">    expect(func.mock.calls.length).toBe(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;测试 runCallback 调用 参数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = jest.fn();</span><br><span class="line">    runCallback(func);</span><br><span class="line">    expect(func.mock.calls[<span class="number">0</span>]).toEqual([<span class="string">&#x27;abc&#x27;</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;测试 runCallback 调用 返回&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = jest.fn();</span><br><span class="line">    <span class="comment">// const func = jest.fn(() =&gt; &#x27;456&#x27;);</span></span><br><span class="line">    func.mockReturnValueOnce(<span class="string">&#x27;laosu&#x27;</span>).mockReturnValueOnce(<span class="string">&#x27;laozhang&#x27;</span>).mockReturnValueOnce(<span class="string">&#x27;laoma&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    runCallback(func);</span><br><span class="line">    runCallback(func);</span><br><span class="line">    runCallback(func);</span><br><span class="line">    expect(func.mock.calls[<span class="number">0</span>]).toEqual([<span class="string">&#x27;abc&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(func.mock);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;测试 runCallback 调用 返回&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = jest.fn();</span><br><span class="line">    <span class="comment">// const func = jest.fn(() =&gt; &#x27;456&#x27;);</span></span><br><span class="line">    <span class="comment">// 链式</span></span><br><span class="line">    <span class="comment">// func.mockReturnValueOnce(&#x27;laosu&#x27;).mockReturnValueOnce(&#x27;laozhang&#x27;).mockReturnValueOnce(&#x27;laoma&#x27;)</span></span><br><span class="line">    func.mockReturnValue(<span class="string">&#x27;laosu&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    runCallback(func);</span><br><span class="line">    runCallback(func);</span><br><span class="line">    runCallback(func);</span><br><span class="line"></span><br><span class="line">    expect(func.mock.results[<span class="number">0</span>].value).toBe(<span class="string">&#x27;laosu&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(func.mock);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/img/jest/mock.jpg" alt="jest mock"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JEST</tag>
      </tags>
  </entry>
  <entry>
    <title>函数应用</title>
    <url>/2020/06/10/%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><blockquote>
<p>一个函数的参数是一个函数（回调）<br>一个函数返回一个函数 （拆分函数）</p>
</blockquote>
<h3 id="函数的before"><a href="#函数的before" class="headerlink" title="函数的before"></a>函数的before</h3><blockquote>
<p>希望羝核心的逻辑提取出来，在外面再增加功能<br>重写原型上的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 箭头函数中没有this指向 没有arguments 所以会向上级作用域查找</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    beforeFn() <span class="comment">// ==&gt; 您好</span></span><br><span class="line">    <span class="built_in">this</span>(...args) <span class="comment">// 展示运算符    ==&gt; 说话 [ 1, 2, 3 ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AOP 切片 装饰</span></span><br><span class="line"><span class="keyword">const</span> say = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; <span class="comment">// 剩余运算符</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;说话&#x27;</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 包装一个新方法</span></span><br><span class="line"><span class="keyword">const</span> newSay = say.before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;您好&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">newSay(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote>
<p>react源码有应用<br>开始的时候做某件事 结束的时候再做某件事</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> perform = <span class="function">(<span class="params">anymethod, wrappers</span>) =&gt;</span> &#123;</span><br><span class="line">  wrappers.forEach(<span class="function"><span class="params">wrap</span> =&gt;</span> &#123;</span><br><span class="line">    wrap.initilizae()</span><br><span class="line">  &#125;)</span><br><span class="line">  anymethod()</span><br><span class="line">  warpper.forEach(<span class="function"><span class="params">wrap</span> =&gt;</span> &#123;</span><br><span class="line">    wrap.close()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">perform(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;说话&#x27;</span>)</span><br><span class="line">&#125;, [</span><br><span class="line">  &#123; <span class="comment">// warpper</span></span><br><span class="line">    <span class="function"><span class="title">initilizae</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">close</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;再见&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="comment">// warpper</span></span><br><span class="line">    <span class="function"><span class="title">initilizae</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;你好1&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">close</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;再见2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你好</span></span><br><span class="line"><span class="comment">// 你好1</span></span><br><span class="line"><span class="comment">// 说话</span></span><br><span class="line"><span class="comment">// 再见</span></span><br><span class="line"><span class="comment">// 再见2</span></span><br></pre></td></tr></table></figure>

<h1 id="柯里化：将一个函数拆分成多个函数"><a href="#柯里化：将一个函数拆分成多个函数" class="headerlink" title="柯里化：将一个函数拆分成多个函数"></a>柯里化：将一个函数拆分成多个函数</h1><blockquote>
<p>可以保留参数 类似bind</p>
</blockquote>
<h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><blockquote>
<p>Object.prototype.toString.call</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setp1</span></span><br><span class="line"><span class="keyword">const</span> checkType = <span class="function">(<span class="params">content, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = checkType(<span class="number">123</span>, <span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// step2</span></span><br><span class="line"><span class="keyword">const</span> checkType = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isString = checkType(<span class="string">&#x27;String&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(isString(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// step3</span></span><br><span class="line"><span class="keyword">const</span> checkType = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> types = [<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Boolean&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> utils = &#123;&#125;</span><br><span class="line">types.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  utils[<span class="string">&#x27;is&#x27;</span>+type] = checkType(type)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(utils.isNumber(<span class="number">123</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(utils.isString(<span class="number">123</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(utils.isBoolean(<span class="literal">true</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="面试题-函数柯里化实现"><a href="#面试题-函数柯里化实现" class="headerlink" title="面试题 函数柯里化实现"></a>面试题 函数柯里化实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a,b,c,d,e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a+b+c+d+e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curring=<span class="function">(<span class="params">fn, arr=[]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = fn.length</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    arr = arr.concat(args)</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt; len) &#123;</span><br><span class="line">      <span class="keyword">return</span> curring(fn, arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = curring(add)(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(r) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<h3 id="改造上面的类型判断"><a href="#改造上面的类型判断" class="headerlink" title="改造上面的类型判断"></a>改造上面的类型判断</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curring=<span class="function">(<span class="params">fn, arr=[]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = fn.length</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    arr = arr.concat(args)</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt; len) &#123;</span><br><span class="line">      <span class="keyword">return</span> curring(fn, arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkType = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> types = [<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Boolean&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> utils = &#123;&#125;</span><br><span class="line">types.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  utils[<span class="string">&#x27;is&#x27;</span>+type] = curring(checkType)(type)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(utils.isNumber(<span class="number">123</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(utils.isString(<span class="number">123</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(utils.isBoolean(<span class="literal">true</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="after函数"><a href="#after函数" class="headerlink" title="after函数"></a>after函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> after = <span class="function">(<span class="params">times, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(--times === <span class="number">0</span>)&#123;</span><br><span class="line">      fn()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAfter = after(<span class="number">3</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;三次后调用&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">newAfter()</span><br><span class="line">newAfter()</span><br><span class="line">newAfter()</span><br></pre></td></tr></table></figure>
<h4 id="完"><a href="#完" class="headerlink" title="(完)"></a>(完)</h4>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端架构</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2020/06/11/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> type = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SERVICE&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;到店记录&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_icondaodianjilu&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;到&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;消费记录&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconxiaofeijilu&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;消&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;BIRTH&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;生日&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconshengri&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;生&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;CALL&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;电话回访&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_icondianhua&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;电&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SMS&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;短信回访&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconduanxin&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;短&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SERVICE_CYCLE&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;到店周期&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_icondaodianzhouqi&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;到&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SERVICE_WARN&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;长时间未到店&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconchangshijianweidaodian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;长&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SERVICE_DANGER&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;超长时间未到店&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconchaochangshijian&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;超&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;HZSR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;孩子生日&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconbabydate_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;孩&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SLQ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;生理期&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconpperiod_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;生&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;JHJLR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;结婚纪念日&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconlovedate_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;婚&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;YYLD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;预约来店&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconshopg_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;约&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;HZSR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;孩子生日&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconbabydate_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;孩&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;SLQ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;生理期&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconpperiod_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;生&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;JHJLR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;结婚纪念日&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconlovedate_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;婚&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>:<span class="string">&quot;YYLD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconName&quot;</span>:<span class="string">&quot;预约来店&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconType&quot;</span>:<span class="string">&quot;case_iconshopg_icon&quot;</span>,</span><br><span class="line">      <span class="string">&quot;iconSortName&quot;</span>:<span class="string">&quot;约&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30844</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591860471000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6772</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;C20061100000001&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">406</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;5折卡&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;4&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="literal">null</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">500000</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591860471000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30777</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591857467000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6747</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000014&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">736</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;MX&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;敏感修复疗程&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;16&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">19400</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591857467000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30746</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591856744000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6738</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000013&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">735</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;美嫩&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;美白嫩肤疗程&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;15&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">29950</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591856744000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30743</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591856617000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6737</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000012&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">747</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;JK&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;精油开背&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;1111&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">55000</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591856617000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30709</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591855225000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6712</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000010&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">736</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;MX&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;敏感修复疗程&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;16&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">19400</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591855225000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30705</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591855058000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6707</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000009&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">748</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;GS&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;刮痧（仅阶梯2次）&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;222&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">2</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">550</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591855058000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30691</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591851796000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6699</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000007&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">736</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;MX&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;敏感修复疗程&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;16&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">19400</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591851796000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30465</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591841521000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6645</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000004&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">735</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;美嫩&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;美白嫩肤疗程&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;15&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">29950</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591841521000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30464</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591841369000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6644</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000003&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">721</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;双眼皮&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;双眼皮&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;5&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">5000</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591841369000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30463</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591841112000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6643</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000002&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">724</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;蒸脸&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;蒸脸&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;8&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">5400</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591841112000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">30462</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CONSUME&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591840877000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;N&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;FINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;billId&quot;</span>:<span class="number">6642</span>,</span><br><span class="line">          <span class="string">&quot;billNo&quot;</span>:<span class="string">&quot;G20061100000001&quot;</span>,</span><br><span class="line">          <span class="string">&quot;items&quot;</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">&quot;item&quot;</span>:[</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">&quot;id&quot;</span>:<span class="number">735</span>,</span><br><span class="line">                          <span class="string">&quot;shortName&quot;</span>:<span class="string">&quot;美嫩&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>:<span class="string">&quot;美白嫩肤疗程&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;no&quot;</span>:<span class="string">&quot;15&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">&quot;itemType&quot;</span>:<span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;times&quot;</span>:<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;amount&quot;</span>:<span class="number">29950</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="number">1591840877000</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29699</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;SMS&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;9&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29698</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;CALL&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;8&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29697</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;YYLD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;7&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29696</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;SLQ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;6&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29695</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;JHJLR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;5&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29694</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;HZSR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;4&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29693</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;HZSR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;3&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29692</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;SMS&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;2&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">29700</span>,</span><br><span class="line">      <span class="string">&quot;customerId&quot;</span>:<span class="number">1813</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;HZSR&quot;</span>,</span><br><span class="line">      <span class="string">&quot;remark&quot;</span>:[</span><br><span class="line">          <span class="string">&quot;10&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;actionTime&quot;</span>:<span class="number">1591804800000</span>,</span><br><span class="line">      <span class="string">&quot;isPending&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">      <span class="string">&quot;actionStatus&quot;</span>:<span class="string">&quot;UNFINISHED&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ext&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;feedback&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishUser&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;finishTs&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">&quot;batchSerial&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事项列表</span></span><br><span class="line"><span class="keyword">let</span> actionCodes = type.map(<span class="function"><span class="params">item</span> =&gt;</span> item.code)</span><br><span class="line"><span class="built_in">console</span>.log(actionCodes);</span><br><span class="line">actions.sort(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> actionCodes.indexOf(prev.type) - actionCodes.indexOf(next.type)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 需求未知需要根据对象的哪个属性排序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description </span>数组sort方法的 sortby（规定排序顺序）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>propName 属性名（数组排序基于的属性）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>referArr 参照数组（objArr数组排序的参照数组）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> sortFunc = <span class="function">(<span class="params">propName, referArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> referArr.indexOf(prev[propName]) - referArr.indexOf(next[propName]) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sort end arr is &#x27;</span>, actions.sort(sortFunc(<span class="string">&#x27;type&#x27;</span>, actionCodes)));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>红宝书-一</title>
    <url>/2021/06/09/%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。</p>
<ul>
<li><code>ECMAScript</code>：由 ECMA-262 定义并提供核心功能。</li>
<li><code>文档对象模型（DOM）</code>：提供与网页内容交互的方法和接口。</li>
<li><code>浏览器对象模型（BOM）</code>：提供与浏览器交互的方法和接口。</li>
</ul>
<h3 id="HTML-中的-JavaScript"><a href="#HTML-中的-JavaScript" class="headerlink" title="HTML 中的 JavaScript"></a>HTML 中的 JavaScript</h3><p>JavaScript 引入网页，首先要解决它与网页的主导语言 HTML 的关系问题。在 JavaScript 早期，<br>网景公司的工作人员希望在将 JavaScript 引入 HTML 页面的同时，不会导致页面在其他浏览器中渲染出<br>问题。通过反复试错和讨论，他们最终做出了一些决定，并达成了向网页中引入通用脚本能力的共识。<br>当初他们的很多工作得到了保留，并且最终形成了 HTML 规范。</p>
<h4 id="script元素"><a href="#script元素" class="headerlink" title="script元素"></a>script元素</h4><p>script元素有下列 8 个属性:</p>
<ul>
<li><code>async</code>：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。</li>
<li><code>charset</code>：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。</li>
<li><code>crossorigin</code>：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin=”anonymous”配置文件请求不必设置凭据标志。crossorigin=”use-credentials”设置凭据标志，意味着出站请求会包含凭据。</li>
<li><code>defer</code>：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。</li>
<li><code>integrity</code>：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。</li>
<li><code>language</code>：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript 1.2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。</li>
<li><code>src</code>：可选。表示包含要执行的代码的外部文件</li>
<li><code>type</code>：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是”text/javascript”，尽管”text/javascript”和”text/ecmascript”都已经废弃了。JavaScript 文件的 MIME 类型通常是”application/x-javascript”，不过给type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有”application/javascript”和”application/ecmascript”。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字</li>
</ul>
<blockquote>
<p><code>注意</code> 按照惯例，外部 JavaScript 文件的扩展名是.js。这不是必需的，因为浏览器不会检查所包含 JavaScript 文件的扩展名。这就为使用服务器端脚本语言动态生成 JavaScript 代码，或者在浏览器中将 JavaScript扩展语言（如TypeScript，或React的 JSX）转译为JavaScript提供了可能性。不过要注意，服务器经常会根据文件扩展来确定响应的正确 MIME 类型。如果不打算使用.js 扩展名，一定要确保服务器能返回正确的 MIME 类型。</p>
</blockquote>
<h5 id="标签位置"><a href="#标签位置" class="headerlink" title="标签位置"></a>标签位置</h5><h5 id="推迟执行脚本"><a href="#推迟执行脚本" class="headerlink" title="推迟执行脚本"></a>推迟执行脚本</h5><p>HTML 4.01 为script元素定义了一个叫 defer 的属性。这个属性表示脚本在执行的时候不会改<br>变页面的结构。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。</p>
<h5 id="异步执行脚本"><a href="#异步执行脚本" class="headerlink" title="异步执行脚本"></a>异步执行脚本</h5><p>HTML5 为script元素定义了 async 属性。从改变脚本处理方式上看，async 属性与 defer 类似。当然，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。不过，与 defer 不同的是，标记为 async 的脚本并不保证能按照它们出现的次序执行，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 这里是页面内容 --&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，第二个脚本可能先于第一个脚本执行。因此，重点在于它们之间没有依赖关系。给脚本添加 async 属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行后再加载其他脚本。正因为如此，异步脚本不应该在加载期间修改 DOM。异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded（参见第 17 章）之前或之后。Firefox 3.6、Safari 5 和 Chrome 7 支持异步脚本。使用 async 也会告诉页面你不会使用document.write，不过好的 Web 开发实践根本就不推荐使用这个方法。</p>
<h5 id="动态加载脚本"><a href="#动态加载脚本" class="headerlink" title="动态加载脚本"></a>动态加载脚本</h5><p>因为 JavaScript 可以使用 DOM API，所以通过向 DOM 中动态添加 script 元素同样可以加载指定的脚本。只要创建一个 script 元素并将其添加到DOM 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>); </span><br><span class="line">script.src = <span class="string">&#x27;gibberish.js&#x27;</span>; </span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br></pre></td></tr></table></figure>

<h4 id="行内代码与外部文件"><a href="#行内代码与外部文件" class="headerlink" title="行内代码与外部文件"></a>行内代码与外部文件</h4><p>推荐使用外部文件的理由如下:</p>
<ul>
<li><code>可维护性</code>。JavaScript 代码如果分散到很多 HTML 页面，会导致维护困难。而用一个目录保存所有 JavaScript 文件，则更容易维护，这样开发者就可以独立于使用它们的 HTML 页面来编辑代码</li>
<li><code>缓存</code>。浏览器会根据特定的设置缓存所有外部链接的 JavaScript 文件，这意味着如果两个页面都用到同一个文件，则该文件只需下载一次。这最终意味着页面加载更快</li>
<li><code>适应未来</code>。通过把 JavaScript 放到外部文件中，就不必考虑用 XHTML 或前面提到的注释黑科技。包含外部 JavaScript 文件的语法在 HTML 和 XHTML 中是一样的。</li>
</ul>
<h4 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h4><p>文档模式:</p>
<ul>
<li><code>混杂模式</code>（quirks mode）</li>
<li><code>标准模式</code>（standards mode）</li>
<li><code>准标准模式</code>（almost standards mode）<br>标准模式通过下列几种文档类型声明开启：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML 4.01 Strict --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- XHTML 1.0 Strict --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HTML5 --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
准标准模式通过过渡性文档类型（Transitional）和框架集文档类型（Frameset）来触发:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML 4.01 Transitional --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HTML 4.01 Frameset --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- XHTML 1.0 Transitional --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- XHTML 1.0 Frameset --&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt;元素"></a><code>&lt;noscript&gt;</code>元素</h4><p>针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，<code>&lt;noscript&gt;</code>元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。<br><code>&lt;noscript&gt;</code>元素可以包含任何可以出现在body中的 HTML 元素，script除外。在下列两种情况下，浏览器将显示包含在<code>&lt;noscript&gt;</code>中的内容：</p>
<ul>
<li>浏览器不支持脚本</li>
<li>浏览器对脚本的支持被关闭</li>
</ul>
<blockquote>
<p>任何一个条件被满足，包含在<code>&lt;noscript&gt;</code>中的内容就会被渲染。否则，浏览器不会渲染<code>&lt;noscript&gt;</code><br>中的内容。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>This page requires a JavaScript-enabled browser.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li>
<li>所有script元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在script元素中的代码必须严格按次序解释。</li>
<li>对不推迟执行的脚本，浏览器必须解释完位于script元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把script元素放到页面末尾，介于主内容之后及<code>&lt;/body&gt;</code>标签之前</li>
<li>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行</li>
<li>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行</li>
<li>通过使用<code>&lt;noscript&gt;</code>元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>红宝书（javascrit)</tag>
      </tags>
  </entry>
  <entry>
    <title>重构慧来客</title>
    <url>/2020/07/23/%E9%87%8D%E6%9E%84%E6%85%A7%E6%9D%A5%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="typora-markdown-编辑器"><a href="#typora-markdown-编辑器" class="headerlink" title="typora markdown 编辑器"></a><a href="https://www.typora.io/">typora markdown 编辑器</a></h1><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><ul>
<li><a href="https://mermaid-js.github.io/mermaid/#/README">mermaid</a></li>
</ul>
<h1 id="顾客模块"><a href="#顾客模块" class="headerlink" title="顾客模块"></a>顾客模块</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">	member --&gt; header组件</span><br><span class="line">	header组件 -.-&gt; 快捷搜索器</span><br><span class="line">	header组件 -.-&gt; 精准搜索</span><br><span class="line">	header组件 -.-&gt; 搜索器</span><br><span class="line">	header组件 -.-&gt; 排序</span><br><span class="line">	header组件 -.-&gt; 批量操作</span><br><span class="line">	header组件 -.-&gt; &#x27;高级查询-touch&#x27;</span><br><span class="line">	</span><br><span class="line">	member --&gt; routerView</span><br><span class="line">	routerView -.-&gt; 顾客概要</span><br><span class="line">	routerView -.-&gt; 顾客动态</span><br><span class="line">	routerView -.-&gt; 顾客分配</span><br><span class="line">	routerView -.-&gt; 顾客分析</span><br><span class="line">	</span><br><span class="line">	顾客动态 --&gt; 日动态</span><br><span class="line">	顾客动态 --&gt; 月动态-缩略</span><br><span class="line">	顾客动态 --&gt; 月动态-日期</span><br></pre></td></tr></table></figure>

<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><ul>
<li>tab 导航</li>
<li>top 公共区域<ul>
<li>门店选择器</li>
<li>精准搜索</li>
<li>高级搜索</li>
<li>快捷/历史/搜索，搜索器</li>
<li>创建顾客<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>概要</li>
</ul>
</li>
<li>维度列表</li>
<li>待办事项<ul>
<li>分配</li>
</ul>
</li>
<li>员工列表</li>
<li>维度统计</li>
<li>顾客表格<ul>
<li>动态</li>
</ul>
</li>
<li>图标注释</li>
<li>日/月(缩略、日期)动态</li>
<li>顾客动态表格</li>
<li>事件新增/详情</li>
<li>日历组件（出现过一万个bug)</li>
<li>要做虚拟滚动优化<ul>
<li>分析</li>
</ul>
</li>
<li>项目分析表格</li>
<li>项目分析配制弹窗</li>
<li>切换维度配制<ul>
<li>列表</li>
</ul>
</li>
<li>顾客动态表格<ul>
<li>以上模块涉及到的模块</li>
</ul>
</li>
<li>顾客详情</li>
<li>单据详情</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>慧来客</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs(一)</title>
    <url>/2020/08/30/nestjs-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><ul>
<li>1、Nest基于TypeScript编写并且结合了 OOP(面向对象编程)，FP(函数式编程)和 FRP (函数式响应编程)的相关理念。在设计上的很多灵感来自于 Angular，Angular 的很多模 式又来自于 Java 中的 Spring 框架，依赖注入、面向切面编程等，所以我们也可以认为: Nest 是 Node.js 版的 Spring 框架</li>
<li>2、Nest 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架</li>
</ul>
<h2 id="为什么要使用脚手架"><a href="#为什么要使用脚手架" class="headerlink" title="为什么要使用脚手架"></a>为什么要使用脚手架</h2><blockquote>
<p>关于这个问题,其实我们在现代前端开发中，你使用vue,react等项目开发中,我们都会使用官方推荐的脚手架(所谓的xx-cli工具)来生成项目,这样的好处在于:</p>
</blockquote>
<ul>
<li>减少时间，不必从零开始搭建初始项目，提高开发效率。</li>
<li>便于多人协作</li>
<li>项目更新同步方便，只需要更新代码库中项目模板，即可下载最新的项目</li>
</ul>
<h1 id="脚手架的安装及常见的命令"><a href="#脚手架的安装及常见的命令" class="headerlink" title="脚手架的安装及常见的命令"></a>脚手架的安装及常见的命令</h1><h2 id="一、官网地址"><a href="#一、官网地址" class="headerlink" title="一、官网地址"></a>一、<a href="https://docs.nestjs.com/cli/overview">官网地址</a></h2><h2 id="nest-cli的基本使用"><a href="#nest-cli的基本使用" class="headerlink" title="nest-cli的基本使用"></a><code>nest-cli</code>的基本使用</h2><ul>
<li><p>1、安装脚手架</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @nestjs/cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、查看脚手架的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、查看全部的命令(不记得使用命令创建文件的时候可以使用)</p>
<blockquote>
<p>根据下面打星多少来表示项目开中使用频率</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest-book git:(master) nest   # 输入的命令</span><br><span class="line">Usage: nest &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version                                   查看当前nestjs-cli的版本</span><br><span class="line">  -h, --help                                      查看帮助</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  new|n [options] [name]                          生成一个新的项目</span><br><span class="line">  build [options] [app]                           构建一个项目</span><br><span class="line">  start [options] [app]                           运行项目</span><br><span class="line">  info|i                                          显示项目的具体信息</span><br><span class="line">  update|u [options]                              升级之前的依赖包</span><br><span class="line">  add [options] &lt;library&gt;                         将对外部库的支持添加到项目中。</span><br><span class="line"></span><br><span class="line">  generate|g [options] &lt;schematic&gt; [name] [path]  Generate a Nest element.</span><br><span class="line">    Available schematics:</span><br><span class="line">      全称              别名(一般我们使用别名就可以)</span><br><span class="line">      ┌───────────────┬─────────────┐</span><br><span class="line">      │ name          │ alias       │</span><br><span class="line">      │ application   │ application │</span><br><span class="line">      │ class         │ cl          │</span><br><span class="line">      │ configuration │ config      │</span><br><span class="line">      │ controller    │ co          │            ** 控制器</span><br><span class="line">      │ decorator     │ d           │            * 装饰器</span><br><span class="line">      │ filter        │ f           │            * 过滤器</span><br><span class="line">      │ gateway       │ ga          │            网关</span><br><span class="line">      │ guard         │ gu          │            * 守卫</span><br><span class="line">      │ interceptor   │ in          │            * 拦截器</span><br><span class="line">      │ interface     │ interface   │            接口</span><br><span class="line">      │ middleware    │ mi          │            中间层  </span><br><span class="line">      │ module        │ mo          │            ** 模块</span><br><span class="line">      │ pipe          │ pi          │            * 管道</span><br><span class="line">      │ provider      │ pr          │</span><br><span class="line">      │ resolver      │ r           │            graphql使用相当于上面的控制器</span><br><span class="line">      │ service       │ s           │            ** 创建服务</span><br><span class="line">      │ library       │ lib         │</span><br><span class="line">      │ sub-app       │ app         │</span><br><span class="line">      └───────────────┴─────────────┘</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、使用脚手架命令创建文件(控制器、服务层、模块)的时候会自动生成一个<code>spec</code>的测试文件,如果不想需要,可以加上参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest g mo user [--no-spec]</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、创建一个<code>module</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest g mo user</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、创建一个控制器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest g co user</span><br><span class="line">nest g co user --no-spec # 创建不带测试文件的</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建的会自动更新到user.module中(前提是你先创建了module)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>7、创建一个服务层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest g s user </span><br></pre></td></tr></table></figure>

<h1 id="使用脚手架构建一个新的项目"><a href="#使用脚手架构建一个新的项目" class="headerlink" title="使用脚手架构建一个新的项目"></a>使用脚手架构建一个新的项目</h1><h1 id="使用脚手架构建一个项目"><a href="#使用脚手架构建一个项目" class="headerlink" title="使用脚手架构建一个项目"></a><center>使用脚手架构建一个项目</center></h1></li>
</ul>
<h2 id="一、项目基本介绍"><a href="#一、项目基本介绍" class="headerlink" title="一、项目基本介绍"></a>一、项目基本介绍</h2><ul>
<li><p>1、使用脚手架创建一个项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nest new nest-base</span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择安装依赖包的方式后就耐心等待</p>
</blockquote>
<p><img src="https://images.gitee.com/uploads/images/2020/0829/191742_a80102c9_1808543.png" alt="输入图片说明" title="image-20200713153707891.png"></p>
</li>
<li><p>2、初始化项目文件介绍(删除<code>node_module</code>后的项目)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  nest-base git:(master) tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── nest-cli.json # nest-cli的配置</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src  # 项目文件</span><br><span class="line">│   ├── app.controller.spec.ts # 控制器的单元测试文件(可以删除)</span><br><span class="line">│   ├── app.controller.ts # 控制器文件(可以删除)</span><br><span class="line">│   ├── app.module.ts # 入口的module(不能删除)</span><br><span class="line">│   ├── app.service.ts # 服务层文件(可以删除)</span><br><span class="line">│   └── main.ts # 项目入口文件(不能删除)</span><br><span class="line">├── test # 测试文件(可以删除)</span><br><span class="line">│   ├── app.e2e-spec.ts</span><br><span class="line">│   └── jest-e2e.json</span><br><span class="line">├── tsconfig.build.json</span><br><span class="line">└── tsconfig.json # tsconfig的配置文件</span><br><span class="line"></span><br><span class="line">2 directories, 13 files</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="二、关于nestjs项目架构"><a href="#二、关于nestjs项目架构" class="headerlink" title="二、关于nestjs项目架构"></a>二、关于<code>nestjs</code>项目架构</h2><ul>
<li><p>1、官网提供的架构图</p>
<p><img src="https://images.gitee.com/uploads/images/2020/0829/191807_440763ce_1808543.png" alt="输入图片说明" title="nestjs01.png"></p>
<p>图中表述的意思:</p>
<ul>
<li>我们可以在项目中定义很多控制层</li>
<li>客户端(浏览器、移动设备)发送<code>http</code>请求,根据<code>url</code>匹配的原则,到对应的控制器</li>
<li>控制器继续访问到服务层</li>
<li>服务层对接数据层,然后对数据的增删改查</li>
</ul>
</li>
<li><p>2、实际中我们构建大型项目的时候的架构</p>
<p><img src="https://images.gitee.com/uploads/images/2020/0829/191823_37b669a3_1808543.jpeg" alt="输入图片说明" title="nestjs02.jpg"></p>
</li>
</ul>
<h2 id="三、基础项目的解释"><a href="#三、基础项目的解释" class="headerlink" title="三、基础项目的解释"></a>三、基础项目的解释</h2><ul>
<li><p>1、目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  src git:(master) tree</span><br><span class="line">.</span><br><span class="line">├── app.controller.spec.ts # 测试文件，可以先不看</span><br><span class="line">├── app.controller.ts # 控制器</span><br><span class="line">├── app.module.ts # 主模块</span><br><span class="line">├── app.service.ts # 服务层</span><br><span class="line">└── main.ts # 入口文件</span><br><span class="line"></span><br><span class="line">0 directories, 5 files</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、<code>main.ts</code>文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用NestFactory工厂创建一个app应用并且传递一个AppModule模块进去,类似我们使用express框架一样的先创建一个app</span></span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  <span class="comment">// 监控端口,运行项目后浏览器直接访问localhost:3000</span></span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、<code>app.module.ts</code>文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [], <span class="comment">// 依赖外面的模块(可以是自己创建的比如userModule，或者是官方提供的比如typeorm, graphql,或者第三方的)</span></span><br><span class="line">  <span class="attr">controllers</span>: [AppController], <span class="comment">// 该模块所用到的控制器</span></span><br><span class="line">  <span class="attr">providers</span>: [AppService], <span class="comment">// 该模块的提供者</span></span><br><span class="line">  <span class="attr">exports</span>: [], <span class="comment">// 别的模块要使用该模块中的某几个方法，就要在这里对外暴漏</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、<code>app.controller.ts</code>文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>() <span class="comment">// 使用nestjs的装饰器装饰表示该类是一个控制器</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="comment">// 使用依赖注入的方式注入一个类</span></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>() <span class="comment">// 定义http的请求方式为get请求</span></span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123; <span class="comment">// 函数名可以随便定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.appService.getHello(); <span class="comment">// 控制层调用服务层的getHello()方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、<code>app.service.ts</code>文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppService</span> </span>&#123;</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// 现在直接返回一个字符串,实际开发中这里调用typeorm中的方法对数据库进行curd操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="依赖注入的概念"><a href="#依赖注入的概念" class="headerlink" title="依赖注入的概念"></a>依赖注入的概念</h1><h2 id="一、依赖注入的概念"><a href="#一、依赖注入的概念" class="headerlink" title="一、依赖注入的概念"></a>一、依赖注入的概念</h2></li>
<li><p>1、依赖注入的概念</p>
<blockquote>
<p>依赖注入(<code>DI</code>)是用来创建对象及其依赖的其它对象的一种方式。 当依赖注入系统创建某个对象实例时，会负责提供该对象所依赖的对象(称为该对象的依赖)。思想来源于<code>angular</code></p>
</blockquote>
</li>
<li><p>2、服务提供上<code>@Injectable</code><br><code>@Injectable</code>装饰器会指出这些服务或其它类是用来注入的(比如一些工具方法)。它还能用于为这些服务提供配置项。</p>
</li>
</ul>
<h2 id="二、常见的定义提供器的方式【代码见01-di分支】"><a href="#二、常见的定义提供器的方式【代码见01-di分支】" class="headerlink" title="二、常见的定义提供器的方式【代码见01.di分支】"></a>二、常见的定义提供器的方式【<a href="https://github.com/kuangshp/nest-book-code/tree/01.di/nest-base">代码见01.di分支</a>】</h2><ul>
<li><p>1、基本方式(<font color="#f00"><b>也是最常见的</b></font>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">providers: [AppService]</span><br><span class="line"><span class="comment">// 使用方式直接依赖注入就可以</span></span><br><span class="line"><span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params"></span>) &#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、<code>uerClass</code>的方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attr">provide</span>: AppService, </span><br><span class="line">    <span class="attr">useClass</span>: AppService </span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 使用方式直接依赖注入就可以</span></span><br><span class="line"><span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params"></span>) &#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、<code>provide</code>定义字符串的方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  AppService,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&#x27;LOG&#x27;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: LoggerService</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 使用方式需要使用@Inject的方式</span></span><br><span class="line"><span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params">  <span class="meta">@Inject</span>(<span class="string">&#x27;LOG&#x27;</span>) <span class="keyword">readonly</span> loggerService: LoggerService</span></span><br><span class="line"><span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line">getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.loggerService.log(<span class="string">&#x27;日志&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.appService.getHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、使用<code>useFactory</code>工厂方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [AppController],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="string">&#x27;LOG&#x27;</span>,</span><br><span class="line">      <span class="attr">useClass</span>: LoggerService</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="string">&#x27;APP_SERVICE&#x27;</span>,</span><br><span class="line">      <span class="attr">useFactory</span>: <span class="function">(<span class="params">logger</span>) =&gt;</span> &#123;</span><br><span class="line">        logger.log(<span class="string">&#x27;使用工厂方式&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;工厂方法返回&#x27;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">inject</span>: [<span class="string">&#x27;LOG&#x27;</span>] <span class="comment">// 注入的顺序就是useFactory函数的顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">exports</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;APP_SERVICE&#x27;</span>) <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;LOG&#x27;</span>) <span class="keyword">readonly</span> loggerService: LoggerService</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loggerService.log(<span class="string">&#x27;日志&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.appService);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;nestjs&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、使用<code>useValue</code>方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&#x27;IS_DEV&#x27;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: &#123; <span class="attr">isDev</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;IS_DEV&#x27;</span>) <span class="keyword">readonly</span> isDev: &#123; isDev: <span class="built_in">boolean</span> &#125;,</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.isDev);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;nestjs&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="nestjs中模块的认识"><a href="#nestjs中模块的认识" class="headerlink" title="nestjs中模块的认识"></a>nestjs中模块的认识</h1><h2 id="一、官网地址-1"><a href="#一、官网地址-1" class="headerlink" title="一、官网地址"></a>一、<a href="https://docs.nestjs.com/modules">官网地址</a></h2><h2 id="二、关于nestjs中module的认识"><a href="#二、关于nestjs中module的认识" class="headerlink" title="二、关于nestjs中module的认识"></a>二、关于<code>nestjs</code>中<code>module</code>的认识</h2><ul>
<li><p>1、在前面介绍到<code>nestjs</code>项目是由很多个<code>module</code>来组装成一个大项目的,类似现在前端框架是由很多的组件组装成一个项目。</p>
</li>
<li><p>2、来自官网介绍模块的图</p>
<p><img src="https://images.gitee.com/uploads/images/2020/0829/192116_f79f4fb6_1808543.png" alt="输入图片说明" title="module.png"></p>
<ul>
<li>一个项目只能有一个根模块<code>app.module.ts</code>这个模块</li>
<li>一个项目可以由多个模块组成</li>
<li>模块之间可以相互的引入</li>
</ul>
</li>
<li><p>3、模块的使用</p>
<ul>
<li>在<code>nestjs</code>中模块是使用<code>@Module</code>装饰器装饰的一个类</li>
<li>在<code>@Module</code>中可接收一个对象，用来描素该模块的功能</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>描素</th>
</tr>
</thead>
<tbody><tr>
<td><code>imports</code></td>
<td>该模块依赖其它的模块, 以数组的方式，表示可以多个</td>
</tr>
<tr>
<td><code>controllers</code></td>
<td>该模块在定义的控制器, 以数组的方式，表示可以多个</td>
</tr>
<tr>
<td><code>providers</code></td>
<td>为该模块提供功能的提供者, 以数组的方式，表示可以多个</td>
</tr>
<tr>
<td><code>exports</code></td>
<td>该模块需要对外暴漏出去给别的模板使用的功能, 以数组的方式，表示可以多个</td>
</tr>
</tbody></table>
<h2 id="三、自定义业务模块"><a href="#三、自定义业务模块" class="headerlink" title="三、自定义业务模块"></a>三、自定义业务模块</h2><ul>
<li><p>1、直接使用命令创建一个<code>module</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在modules的文件夹下创建一个用户模块</span></span><br><span class="line">nest g mo modules/user</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建后的提示语</span></span><br><span class="line">➜  nest-base git:(02.module) ✗ nest g mo modules/user</span><br><span class="line">CREATE src/modules/user/user.module.ts (81 bytes)  # 表示创建的文件所在的位置</span><br><span class="line">UPDATE src/app.module.ts (317 bytes) # 更新了那个文件(会自动在app.module.ts的import中引入当前创建的module)</span><br><span class="line">➜  nest-base git:(02.module) ✗ </span><br></pre></td></tr></table></figure>
</li>
<li><p>2、我们讲到可以在<code>module</code>中创建属于该<code>module</code>下面的控制器和服务层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建不带测试文件的控制器</span></span><br><span class="line">➜  nest-base git:(02.module) ✗ nest g co modules/user --no-spec</span><br><span class="line">CREATE src/modules/user/user.controller.ts (97 bytes)</span><br><span class="line">UPDATE src/modules/user/user.module.ts (167 bytes)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建不带测试文件的服务层</span></span><br><span class="line">➜  nest-base git:(02.module) ✗ nest g s modules/user --no-spec         </span><br><span class="line">CREATE src/modules/user/user.service.ts (88 bytes)</span><br><span class="line">UPDATE src/modules/user/user.module.ts (241 bytes)</span><br><span class="line">➜  nest-base git:(02.module) ✗ </span><br></pre></td></tr></table></figure>
</li>
<li><p>3、上面我们说过<code>app.controller.ts</code>和<code>app.service.ts</code>是非必须文件,我们删除的时候要注意在<code>app.module.ts</code>中也要删除依赖引入</p>
</li>
<li><p>4、在<code>user.controller.ts</code>中添加一个访问用户列表的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService,</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Get</span>([path])当前的path会拼接到<span class="doctag">@Controller</span>(&#x27;user&#x27;)到里面user的路径后面，不写就表示为空的</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="comment">// userList这个方法名随便自己定义,要见文思意就可以</span></span><br><span class="line">  <span class="keyword">async</span> userList(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">    <span class="comment">// 控制层访问服务层的userList方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.userService.userList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、在<code>user.service.ts</code>中定义与控制器对接的<code>userList</code>方法(模拟返回点数据)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> userList(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、运行项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run start:dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、浏览器上直接访问<code>localhost:3000/user</code></p>
</li>
</ul>
<h2 id="四、自定义模块之间的相互引入"><a href="#四、自定义模块之间的相互引入" class="headerlink" title="四、自定义模块之间的相互引入"></a>四、自定义模块之间的相互引入</h2><ul>
<li><p>1、在上面的基础上创建一个日志模块及服务</p>
<blockquote>
<p>官方在<code>@nestjs/common</code>中提供了一个<code>Logger</code>日志模块,我们这仅仅是做演示模块之间的引入 </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  nest-base git:(02.module) nest g mo modules/log          </span><br><span class="line">CREATE src/modules/log/log.module.ts (80 bytes)</span><br><span class="line">UPDATE src/app.module.ts (265 bytes)</span><br><span class="line">➜  nest-base git:(02.module) ✗ nest g s modules/log --no-spec</span><br><span class="line">CREATE src/modules/log/log.service.ts (87 bytes)</span><br><span class="line">UPDATE src/modules/log/log.module.ts (151 bytes)</span><br><span class="line">➜  nest-base git:(02.module) ✗ </span><br></pre></td></tr></table></figure>
</li>
<li><p>2、在<code>log.service.ts</code>中定义日志打印的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LogService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  log(str: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  error(str: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、我们要在<code>LogModule</code>模块以为的模块使用到上面定义的<code>log</code>和<code>error</code>方法就要在<code>LogModule</code>中对外暴露出去</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./log.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [LogService],</span><br><span class="line">  <span class="comment">// 这里是以数组的方式,表示一个模块里面可以对外暴露多个</span></span><br><span class="line">  <span class="attr">exports</span>: [LogService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LogModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、在<code>app.module.ts</code>中删除<code>LogModule</code>的引入</p>
</li>
<li><p>5、在<code>user.module.ts</code>中引入<code>LogModule</code>模块</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="comment">// 引入LogModule</span></span><br><span class="line">  <span class="attr">imports</span>: [LogModule],</span><br><span class="line">  <span class="attr">controllers</span>: [UserController],</span><br><span class="line">  <span class="attr">providers</span>: [UserService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>6、在<code>user.controller.ts</code>中使用<code>LogService</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> logService: LogService,</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> userList(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">    <span class="comment">// 控制层访问服务层的userList方法</span></span><br><span class="line">    <span class="built_in">this</span>.logService.log(<span class="string">&#x27;运行了userList控制器&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、<font color="#f00">注意点:如果要使用模块外的提供者而为引入模块会提示错误或者引入的模块中没有外暴露出来的提供者</font></p>
<p><img src="https://images.gitee.com/uploads/images/2020/0829/192027_4708ffc5_1808543.png" alt="输入图片说明" title="module01.png"></p>
</li>
<li><p>8、<a href="https://github.com/kuangshp/nest-book-code/tree/02.module">代码参考</a></p>
</li>
</ul>
<h2 id="五、全局模块"><a href="#五、全局模块" class="headerlink" title="五、全局模块"></a>五、全局模块</h2><ul>
<li><p>1、<a href="https://docs.nestjs.com/modules#global-modules">参考文档</a></p>
</li>
<li><p>2、全局模块的定义方式</p>
<blockquote>
<p>在普通模块的上面添加一个<code>@Global()</code>的装饰器,对外暴露想暴露的提供者,就那么简单</p>
</blockquote>
</li>
<li><p>3、为什么要使用全局模块</p>
<blockquote>
<p>项目比较大,一些公共模块,会在项目很多个模块中需要引入的情况下</p>
</blockquote>
</li>
<li><p>4、如果使用全局模块</p>
<ul>
<li>直接在<code>app.module.ts</code>中的<code>import</code>中添加全局模块</li>
<li>在需要使用全局模块中暴露的提供者,不需要在该模块中<code>import</code></li>
<li>直接依赖注入就可以</li>
</ul>
</li>
<li><p>5、<a href="https://github.com/kuangshp/nest-book-code/tree/03.global_module">代码参考地址</a></p>
</li>
</ul>
<h2 id="六、动态模块"><a href="#六、动态模块" class="headerlink" title="六、动态模块"></a>六、动态模块</h2><ul>
<li><p>1、官网地址<a href="https://docs.nestjs.com/modules#dynamic-modules">地址一</a>和<a href="https://docs.nestjs.com/fundamentals/dynamic-modules">地址二</a></p>
</li>
<li><p>2、使用动态模块的场景</p>
<blockquote>
<p>需要向模块中传递参数的情况下，我们就要使用动态模块,不传递参数就使用普通模块即可</p>
</blockquote>
</li>
<li><p>3、动态模块中常见的2个静态方法,选择用其中一个就可以</p>
<ul>
<li><code>register()</code></li>
<li><code>forRoot()</code></li>
</ul>
</li>
</ul>
<h4 id="使用register静态方法创建一个日志的动态模块"><a href="#使用register静态方法创建一个日志的动态模块" class="headerlink" title="使用register静态方法创建一个日志的动态模块"></a>使用<code>register</code>静态方法创建一个日志的动态模块</h4><ul>
<li><p>1、定义模块</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, DynamicModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LogService &#125; <span class="keyword">from</span> <span class="string">&#x27;./log.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LogModule</span> </span>&#123;</span><br><span class="line">  <span class="comment">// register函数中可以接收外部传递过来的变量,或者对象</span></span><br><span class="line">  <span class="keyword">static</span> register(prefix: <span class="built_in">string</span>): DynamicModule &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">module</span>: LogModule,</span><br><span class="line">      <span class="attr">providers</span>: [</span><br><span class="line">        LogService,</span><br><span class="line">        <span class="comment">// 使用useValue的方式在模块中注入一个变量,可以理解为在该模块中注入了别的模块,只是注入的方式不是采用import</span></span><br><span class="line">        <span class="comment">// 而是采用模块调用静态方法的方式</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">provide</span>: <span class="string">&#x27;PREFIX&#x27;</span>,</span><br><span class="line">          <span class="attr">useValue</span>: prefix</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// 动态模块一样的也要对外暴露出去</span></span><br><span class="line">      <span class="attr">exports</span>: [LogService]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>2、在日志中使用当前模块提供的变量</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Inject &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LogService</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;PREFIX&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> prefix: <span class="built_in">string</span>, <span class="comment">// 依赖注入的方式</span></span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  log(str: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.prefix&#125;</span>-<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3、在<code>user.module.ts</code>使用动态模块</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    LogModule.register(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [UserController]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、控制器上使用和之前一样的使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> logService: LogService,</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  hello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logService.log(<span class="string">&#x27;hello的控制器&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello word&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、<a href="https://github.com/kuangshp/nest-book-code/tree/04.dynamic_module/nest-base">参考代码</a></p>
</li>
</ul>
<h4 id="使用forRoot静态方法的方式创建一个日志模块"><a href="#使用forRoot静态方法的方式创建一个日志模块" class="headerlink" title="使用forRoot静态方法的方式创建一个日志模块"></a>使用<code>forRoot</code>静态方法的方式创建一个日志模块</h4><ul>
<li>1、使用方式和<code>register</code>一样的</li>
<li>2、两者之间的区别<a href="https://stackoverflow.com/questions/59358741/are-there-any-differences-between-using-forroot-or-register-when-creating-a">网上也没具体介绍</a></li>
<li>3、<a href="https://github.com/kuangshp/nest-book-code/tree/04.dynamic_module_02/nest-base">参考代码</a></li>
</ul>
<h2 id="七、解决模块之间的循环依赖"><a href="#七、解决模块之间的循环依赖" class="headerlink" title="七、解决模块之间的循环依赖"></a>七、解决模块之间的循环依赖</h2><ul>
<li><p>1、<a href="https://docs.nestjs.com/fundamentals/circular-dependency#module-forward-reference">官方文档</a></p>
</li>
<li><p>2、比较常见的场景</p>
<blockquote>
<p>用户模块和授权模块,登录用户登录了，我们要给该用户授权(就依赖了授权模块),授权模块又要根据用户信息来授权(依赖了用户模块),这样就造成一个循环依赖的关系</p>
</blockquote>
</li>
<li><p>3、创建用户模块和授权模块,并且创建对应的服务与暴露出去</p>
</li>
<li><p>4、在用户的控制器中注入授权的服务</p>
</li>
<li><p>5、在授权的服务层注入用户的服务</p>
</li>
<li><p>6、直接提示错误,并且提示你错误解决参考地址<br><img src="https://images.gitee.com/uploads/images/2020/0829/192049_cbee883e_1808543.png" alt="输入图片说明" title="module02.png"></p>
</li>
<li><p>7、我们在相互引入模块的地方采用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">imports: [forwardRef(<span class="function">() =&gt;</span> AuthModule)],</span><br></pre></td></tr></table></figure></li>
<li><p>8、<a href="https://github.com/kuangshp/nest-book-code/tree/05.module/nest-base">参考代码</a></p>
</li>
</ul>
<h2 id="八、官方提供的module使用方式见各自文档"><a href="#八、官方提供的module使用方式见各自文档" class="headerlink" title="八、官方提供的module使用方式见各自文档"></a>八、<a href="https://github.com/nestjs">官方提供的<code>module</code></a>使用方式见各自文档</h2><h1 id="nestjs生命周期钩子函数-使用频率低"><a href="#nestjs生命周期钩子函数-使用频率低" class="headerlink" title="nestjs生命周期钩子函数(使用频率低)"></a><center>nestjs生命周期钩子函数(<font color="#f00">使用频率低</font>)</center></h1><h2 id="一、官网地址-2"><a href="#一、官网地址-2" class="headerlink" title="一、官网地址"></a>一、<a href="https://docs.nestjs.com/fundamentals/lifecycle-events">官网地址</a></h2><h2 id="二、常见的生命周期"><a href="#二、常见的生命周期" class="headerlink" title="二、常见的生命周期"></a>二、常见的生命周期</h2><p>所有应用程序元素都有一个由<code>Nest</code>管理的生命周期。<code>Nest</code>提供了生命周期钩子，提供了对关键生命时刻的可见性，以及在关键时刻发生时采取行动的能力。</p>
<ul>
<li>1、常见的生命周期钩子函数</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>描素</th>
</tr>
</thead>
<tbody><tr>
<td><code>onModuleInit()</code></td>
<td>初始化主模块后调用</td>
</tr>
<tr>
<td><code>onApplicationBootstrap()</code></td>
<td>在应用程序完全启动并引导后调用</td>
</tr>
<tr>
<td><code>onModuleDestroy()</code></td>
<td>在Nest销毁主模块(<code>app.close()</code>方法之前进行清理)</td>
</tr>
<tr>
<td><code>beforeApplicationShutdown()</code></td>
<td>响应系统信号(当应用程序关闭时，例如<code>SIGTERM</code>)</td>
</tr>
</tbody></table>
<ul>
<li><p>2、使用方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, OnModuleInit &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersService</span> <span class="title">implements</span> <span class="title">OnModuleInit</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">onModuleInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The module has been initialized.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>nextjs(二)</title>
    <url>/2020/09/01/nestjs-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="RESTful-API的设计指南"><a href="#RESTful-API的设计指南" class="headerlink" title="RESTful API的设计指南"></a><center><code>RESTful API</code>的设计指南</center></h1><h2 id="一、参考文档"><a href="#一、参考文档" class="headerlink" title="一、参考文档"></a>一、<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">参考文档</a></h2><h2 id="二、常见的请求方式"><a href="#二、常见的请求方式" class="headerlink" title="二、常见的请求方式"></a>二、常见的请求方式</h2><ul>
<li>1、请求方式对比</li>
</ul>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>GET</code>请求</td>
<td>从服务器取出资源（一项或多项）</td>
</tr>
<tr>
<td><code>POST</code>请求</td>
<td>在服务器新建一个资源</td>
</tr>
<tr>
<td><code>PUT</code>请求</td>
<td>在服务器更新资源（客户端提供改变后的完整资源）</td>
</tr>
<tr>
<td><code>PATCH</code>请求</td>
<td>在服务器更新资源（客户端提供改变的属性）</td>
</tr>
<tr>
<td><code>DELETE</code>请求</td>
<td>从服务器删除资源</td>
</tr>
</tbody></table>
<ul>
<li>2、区分<code>PUT</code>和<code>PATCH</code><ul>
<li>1、两个请求方式都是向服务器发送修改数据的请求</li>
<li>2、<code>PUT</code>可以理解为彻底全部的更新数据</li>
<li>3、<code>PATCH</code>可以理解为打补丁,就是更新数据的一部分<font color="#f00">(也是我们比较常用的方式)</font></li>
</ul>
</li>
</ul>
<h2 id="三、设计接口规范-对阮一峰文档的补充"><a href="#三、设计接口规范-对阮一峰文档的补充" class="headerlink" title="三、设计接口规范(对阮一峰文档的补充)"></a>三、设计接口规范(对阮一峰文档的补充)</h2><blockquote>
<p>认真看下阮一峰文章里面对日常<code>RESTful API</code>开发,会对其了解,我相信也能写出符合标准的<code>RESTful API</code>接口,但是我还是要补充一点</p>
</blockquote>
<ul>
<li><p>1、对于增删改查严格使用<code>GET</code>、<code>POST</code>、<code>PATCH</code>、<code>DELETE</code>的请求方式,不要清一色的使用<code>GET</code>和<code>POST</code>请求</p>
</li>
<li><p>2、上面不管是<code>GET</code>、<code>POST</code>、<code>PATCH</code>、<code>DELETE</code>都表示一个动作(所谓的动词)</p>
</li>
<li><p>3、我们在设计<code>API</code>的时候就不要在出现<strong>动词</strong>了,比如<code>xxx/api/v1/get_user</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">xxx/api/v1/get_user <span class="comment">// 不好的接口设计 get请求 在url中使用了get这个动词</span></span><br><span class="line">xxx/api/v1/save <span class="comment">// 不好的接口设计 post请求 提交数据,在url中出现动词save</span></span><br><span class="line"></span><br><span class="line">xxx/api/v1/user <span class="comment">//get请求 表示获取用户列表,返回是一个数组</span></span><br><span class="line">xxx/api/v1/user/<span class="number">1</span> <span class="comment">//get请求 表示获取用户信息,返回一个对象</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>4、一般我们的<code>url</code>地址都是使用下划线命名的方式,不使用小驼峰命名方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">xxx/api/v1/modifyPassword <span class="comment">// 不要使用小驼峰命名,url选用下划线的方式</span></span><br></pre></td></tr></table></figure>

<h2 id="一、服务器端接收客户端传递的参数的几种方式"><a href="#一、服务器端接收客户端传递的参数的几种方式" class="headerlink" title="一、服务器端接收客户端传递的参数的几种方式"></a>一、服务器端接收客户端传递的参数的几种方式</h2></li>
<li><p>1、<code>POST</code>、<code>PATCH</code>请求体中发送的数据(最常见)</p>
</li>
<li><p>2、<code>GET</code>请求的<code>query</code>参数方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">xxx/api/v1/user?pageSize=<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>3、<code>GET</code>、<code>PATCH</code>、<code>DELETE</code>请求的<code>params</code>的参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">xxx/api/v1/user/<span class="number">1</span> <span class="comment">// 获取用户id=1的数据</span></span><br></pre></td></tr></table></figure></li>
<li><p>4、请求头的数据,常见的<code>token</code></p>
</li>
</ul>
<h2 id="二、在Nestjs中接收浏览器上的参数"><a href="#二、在Nestjs中接收浏览器上的参数" class="headerlink" title="二、在Nestjs中接收浏览器上的参数"></a>二、在<code>Nestjs</code>中接收浏览器上的参数</h2><ul>
<li>1、常见的方法列表</li>
</ul>
<table>
<thead>
<tr>
<th align="center">No.</th>
<th>名字</th>
<th>字段说明(参考<code>express</code>框架字段)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td><code>@Request()</code></td>
<td><code>req</code> 获取到req请求的参数</td>
</tr>
<tr>
<td align="center">2</td>
<td><code>@Response()</code></td>
<td><code>res</code> 使用了res就不使用使用return返回值需要使用res.send()</td>
</tr>
<tr>
<td align="center">3</td>
<td><code>@Next()</code></td>
<td>next</td>
</tr>
<tr>
<td align="center">4</td>
<td><code>@Session()</code></td>
<td><code>req.</code>session</td>
</tr>
<tr>
<td align="center">5</td>
<td><code>@Param(key?: string)</code></td>
<td><code>req.params</code> / <code>req.params[key]</code> 获取动态路由的参数</td>
</tr>
<tr>
<td align="center">6</td>
<td><code>@Body(key?: string)</code></td>
<td><code>req.body</code> / <code>req.body[key]</code> 获取post请求提交的参数</td>
</tr>
<tr>
<td align="center">7</td>
<td><code>@Query(key?: string)</code></td>
<td><code>req.query</code> / <code>req.query[key]</code> 获取get请求query的参数</td>
</tr>
<tr>
<td align="center">8</td>
<td><code>@Headers(name?: string)</code></td>
<td><code>req.headers</code> / <code>req.headers[name]</code> 获取请求头的参数</td>
</tr>
</tbody></table>
<ul>
<li><p>2、关于<code>@Query()</code>获取全部的参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 批量获取全部的参数,接收到的是一个对象,你传递什么我就接收什么</span></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  userList(</span><br><span class="line">    <span class="meta">@Query</span>() query: <span class="built_in">any</span></span><br><span class="line">  ): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(query);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户列表&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 浏览器访问的url地址:http://localhost:3000/user?name=hello&amp;age=20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3、选择性接收<code>Query()</code>中带参数并且判断参数类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 只接收全部参数里面的其中一个或者多个,ParseIntPipe是nestjs中内置管道</span></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  userList(</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">&#x27;age&#x27;</span>, <span class="keyword">new</span> ParseIntPipe()) age: <span class="built_in">number</span>,</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">&#x27;name&#x27;</span>) name: <span class="built_in">string</span></span><br><span class="line">  ): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// 我只要age和name字段,别的你传递多的给我，我也不接收也不处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(age, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户列表&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 浏览器访问的url地址:http://localhost:3000/user?name=hello&amp;age=20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>4、<code>@Param</code>参数的获取</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&quot;:id&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">userInfo</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="meta">@Param</span>() params:<span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">// 输出&#123; id: &#x27;2&#x27; &#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;用户详情&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 浏览器访问的url地址:http://localhost:3000/user/2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>5、<code>@Param</code>单独接受参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&quot;:id&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">userInfo</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>, <span class="keyword">new</span> ParseIntPipe()) id: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;用户详情&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 浏览器访问的url地址:http://localhost:3000/user/2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>6、<code>@Body()</code>接受<code>post</code>提交过来的数据(一次性接收全部的,也可以在<code>@Body()</code>中加参数类似上面的方式一样的校验传递过来的参数[仅仅是针对参数比较少的情况下])</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="function"><span class="title">addUser</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="meta">@Body</span>() body: <span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 这种写法适合大规模的提交参数,自己又不想一个一个去校验</span></span><br><span class="line">  <span class="built_in">console</span>.log(body);</span><br><span class="line">  <span class="keyword">return</span> body</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用postman提交post请求地址:http://localhost:3000/user/</span></span><br></pre></td></tr></table></figure></li>
<li><p>7、<a href="https://github.com/kuangshp/nest-book-code/tree/06.params">参考代码</a></p>
</li>
</ul>
<h2 id="三、注意点-个人建议"><a href="#三、注意点-个人建议" class="headerlink" title="三、注意点(个人建议)"></a>三、注意点(<font color="#f00">个人建议</font>)</h2><p>我们在写控制层和服务层的时候劲量遵循增删改查的顺序来写,这样方便以后查找代码比较方便,方便直接定位到哪里</p>
<h3 id="一、关于前端模板引擎的介绍"><a href="#一、关于前端模板引擎的介绍" class="headerlink" title="一、关于前端模板引擎的介绍"></a>一、关于前端模板引擎的介绍</h3><p>现在如果是面向多端开发的模式下,会进行前后端分离式的方式进行开发,一般用<code>nestjs</code>直接返回<code>api</code>接口,前端用<code>angular</code>、<code>react</code>、<code>vue</code>去做的,如果不考虑做多端开发,快速点可以直接在<code>nestjs</code>写前端模板,类似我们比较传统的<code>java</code>开发中,使用<code>jsp</code>模板来渲染前端页面。根据项目具体情况选择该技术栈</p>
<h2 id="二、在Nestjs中自己配置ejs模板"><a href="#二、在Nestjs中自己配置ejs模板" class="headerlink" title="二、在Nestjs中自己配置ejs模板"></a>二、在<code>Nestjs</code>中自己配置<code>ejs</code>模板</h2><ul>
<li><p>1、<a href="https://docs.nestjs.com/techniques/mvc">官网地址</a></p>
</li>
<li><p>2、安装模板引擎包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、在<code>main.ts</code>中配置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dotenv/config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Logger &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> &#123; NestExpressApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/platform-express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create&lt;NestExpressApplication&gt;(AppModule);</span><br><span class="line">  <span class="comment">// 配置静态文件的目录</span></span><br><span class="line">  <span class="comment">//方式一是直接访问:localhost:4000/1.jpg</span></span><br><span class="line">  <span class="comment">//app.useStaticAssets(join(__dirname, &#x27;..&#x27;, &#x27;public&#x27;)); </span></span><br><span class="line">  <span class="comment">//方式二是访问:localhost:4000/static/1.jpg但是在public文件夹下不需要创建static目录</span></span><br><span class="line">  app.useStaticAssets(join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;public&#x27;</span>), &#123;</span><br><span class="line">  		<span class="attr">prefix</span>: <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 配置视图文件的目录</span></span><br><span class="line">  app.setBaseViewsDir(join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;views&#x27;</span>)); </span><br><span class="line">  app.setViewEngine(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    Logger.log(<span class="string">`服务已经启动,请访问:http://wwww.localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>3、在项目的根目录下创建<code>public</code>和<code>views</code>的目录</p>
</li>
<li><p>4、测试<code>views</code>文件夹下创建一个<code>index.ejs</code>文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>5、控制器中使用<code>@Render</code>渲染模板</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Render &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@Render</span>(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">  getHello(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;哈哈&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、在浏览器上输入<code>localhost:3000</code>查看结果</p>
</li>
</ul>
<h2 id="三、测试访问静态目录文件"><a href="#三、测试访问静态目录文件" class="headerlink" title="三、测试访问静态目录文件"></a>三、测试访问静态目录文件</h2><ul>
<li><p>1、在<code>public</code>中创建<code>css</code>、<code>js</code>、<code>images</code>文件夹</p>
</li>
<li><p>2、在<code>index.ejs</code>模板中使用样式、<code>js</code>、图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/images/dog.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;h1&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;点击了我&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、模板数据渲染"><a href="#四、模板数据渲染" class="headerlink" title="四、模板数据渲染"></a>四、模板数据渲染</h2><p>在远古时代的前端开发或者叫页面仔的时代，前端开发把静态页面写好了，发给后端的同学(java,php)他们使用模板不同的模板引擎，在前端静态页面中把需要显示从数据库获取的数据的地方使用特殊的符合，动态的显示数据。</p>
<ul>
<li><p>1、被处理的前端模板,等待后端数据反填上去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%=title%&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&lt;%=title%&gt;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2、在<code>Nestjs</code>中渲染前端模板及返回数据</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Render, Post, Body, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;主页&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  <span class="meta">@Render</span>(<span class="string">&#x27;login&#x27;</span>) <span class="comment">// 渲染views里面的ejs模板</span></span><br><span class="line">  <span class="function"><span class="title">loginPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的数据到时候讲到数据库，服务层的时候直接从数据库拉取数据,现在先写个假数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;登录页面&#x27;</span> &#125; <span class="comment">// 返回给ejs模板的数据</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">login</span>(<span class="params"><span class="meta">@Body</span>() body, <span class="meta">@Response</span>() res</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(body); <span class="comment">// 获取表单中提交的数据</span></span><br><span class="line">    res.redirect(<span class="string">&#x27;/user&#x27;</span>); <span class="comment">// 重定向到用户首页</span></span><br><span class="line">    <span class="comment">// 注意如果在控制器函数中使用了@Response()就不能使用return返回值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、在浏览器上直接访问<code>localhost:3000/user/login</code></p>
</li>
<li><p>4、<a href="https://github.com/kuangshp/nest-book-code/tree/07.ejs">本章节代码</a></p>
</li>
</ul>
<h2 id="一、Cookie的介绍"><a href="#一、Cookie的介绍" class="headerlink" title="一、Cookie的介绍"></a>一、<code>Cookie</code>的介绍</h2><ul>
<li>1、<code>HTTP</code> 是无状态协议。简单地说，当你浏览了一个页面,然后转到同一个网站的另一个页 面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。如果我们要实现多个页面之间共享数据的话我们就可以使用 <code>Cookie</code> 或者 <code>Session</code> 实 现</li>
<li>2、<code>cookie</code> 是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名的时候共享数据。</li>
</ul>
<h2 id="二、Cookie的特点"><a href="#二、Cookie的特点" class="headerlink" title="二、Cookie的特点"></a>二、<code>Cookie</code>的特点</h2><ul>
<li><code>cookie</code> 保存在浏览器本地</li>
<li>正常设置的 <code>cookie</code> 是不加密的，用户可以自由看到;</li>
<li>用户可以删除 <code>cookie</code>，或者禁用它</li>
<li><code>cookie</code> 可以被篡改</li>
<li><code>cookie</code> 可以用于攻击</li>
<li><code>cookie</code> 存储量很小。实际上要被<code>localStorage</code>替代，但是后者 IE9 兼容。</li>
</ul>
<h2 id="三、在Nestjs中使用Cookie"><a href="#三、在Nestjs中使用Cookie" class="headerlink" title="三、在Nestjs中使用Cookie"></a>三、在<code>Nestjs</code>中使用<code>Cookie</code></h2><ul>
<li><p>1、<a href="https://www.npmjs.com/package/cookie-parser"><code>cookie-parser</code>地址</a></p>
</li>
<li><p>2、下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install cookie-parser</span><br><span class="line">npm install @types/cookie-parser -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、在<code>main.ts</code>中使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cookieParser <span class="keyword">from</span> <span class="string">&#x27;cookie-parser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  app.use(cookieParser());</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、在组件的控制器中写入和获取<code>cookie</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Response, Request &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="function"><span class="title">index</span>(<span class="params"><span class="meta">@Request</span>() req</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.cookies.name, <span class="string">&#x27;当前的cookie&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;主页&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">login</span>(<span class="params"><span class="meta">@Response</span>() res</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果使使用了res就不能使用return，必须使用send</span></span><br><span class="line">    res.cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, &#123; <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">5</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    res.send(<span class="string">&#x27;登录页面&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>5、在浏览器控制图查看<code>cookie</code></p>
<blockquote>
<p>到了时间刷新浏览器控制图上的刷新的,<code>cookie</code>就会被清空的</p>
</blockquote>
<p><img src="https://images.gitee.com/uploads/images/2020/0831/201855_084c9f0f_1808543.jpeg" alt="输入图片说明" title="nestjs03_cookie.jpg"></p>
</li>
</ul>
<ul>
<li>6、关于<code>cookie</code>的参数说明</li>
</ul>
<table>
<thead>
<tr>
<th align="center">NO.</th>
<th align="left">参数</th>
<th>类型</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left"><code>domain</code></td>
<td><code>String</code></td>
<td>指定域名下有效</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left"><code>expires</code></td>
<td><code>Date</code></td>
<td>过期时间(秒),设置在某个时间点后会在该<code>cookoe</code>后失效</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left"><code>httpOnly</code></td>
<td><code>Boolean</code></td>
<td>默认为<code>false</code>表示不允许客户端(通过<code>js</code>来获取<code>cookie</code>)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left"><code>maxAge</code></td>
<td><code>String</code></td>
<td>最大失效时间(毫秒),设置在多少时间后失效</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left"><code>path</code></td>
<td><code>String</code></td>
<td>表示<code>cookie</code>影响到的路径,如:<code>path=/</code>如果路径不能匹配的时候,浏览器则不发送这个<code>cookie</code></td>
</tr>
<tr>
<td align="center">6</td>
<td align="left"><code>secure</code></td>
<td><code>Boolean</code></td>
<td>当 <code>secure</code> 值为<code>true</code> 时,<code>cookie</code> 在 <code>HTTP</code> 中是无效,在 <code>HTTPS</code>中才有效</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left"><code>signed</code></td>
<td><code>Boolean</code></td>
<td>表示是否签名<code>cookie</code>,如果设置为<code>true</code>的时候表示对这个<code>cookie</code>签名了,这样就需要用<code>res.signedCookies()</code>获取值<code>cookie</code>不是使用<code>res.cookies()</code>了,</td>
</tr>
</tbody></table>
<ul>
<li><p>7、签名<code>cookie</code>的设置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts中</span></span><br><span class="line">app.use(cookieParser(process.env.SECRET)); <span class="comment">// 配合dotenv包来使用</span></span><br><span class="line"><span class="string">``</span><span class="string">`c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>typescript</span><br><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Response, Request &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="function"><span class="title">index</span>(<span class="params"><span class="meta">@Request</span>() req</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.signedCookies, <span class="string">&#x27;当前的cookie&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;主页&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">login</span>(<span class="params"><span class="meta">@Response</span>() res</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果使使用了res就不能使用return，必须使用send</span></span><br><span class="line">    <span class="comment">// res.cookie(&#x27;name&#x27;, &#x27;hello&#x27;, &#123; maxAge: 1000 * 5, httpOnly: true &#125;);</span></span><br><span class="line">    res.cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, &#123; <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">5</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="attr">signed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    res.send(<span class="string">&#x27;登录页面&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>8、如果要销毁<code>cookie</code>常见的方式</p>
<ul>
<li>直接将值设置为空</li>
<li>设置<code>maxAge=0</code></li>
</ul>
</li>
<li><p>9、<a href="https://github.com/kuangshp/nest-book-code/tree/08.cookie">本小节代码</a></p>
</li>
</ul>
<h2 id="四、Nestjs中使用session"><a href="#四、Nestjs中使用session" class="headerlink" title="四、Nestjs中使用session"></a>四、<code>Nestjs中使用session</code></h2><ul>
<li><p>1、<strong><code>session</code></strong> 是另一种记录客户状态的机制，不同的是 <strong><code>Cookie</code></strong> 保存在客户端浏览器中，而 <strong><code>session</code></strong> 保存 在服务器上</p>
</li>
<li><p>2、<code>session</code>的工作流程<br>当浏览器访问服务器并发送第一次请求的时候,服务器端会创建一个<code>session</code>对象,生成一个类似于<code>&#123;key: &#39;&#39;, value: &#39;&#39;&#125;</code>的对象,然后将<code>key(cookie)</code>返回到浏览器(客户)端,浏览器再次访问的时候携带这个<code>key(cookie)</code>到服务器端,找到这个<code>session</code>的<code>value</code>值。</p>
</li>
<li><p>3、在<code>nestjs</code>中使用<code>express-session</code>进行<code>session</code>的操作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">npm install express-session</span><br><span class="line">npm install <span class="meta">@types</span>/express-session -D</span><br></pre></td></tr></table></figure></li>
<li><p>4、在<code>main.ts</code>中配置<code>session</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> session <span class="keyword">from</span> <span class="string">&#x27;express-session&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  <span class="comment">// 配置中间件使用session,加盐是123456(随便写的)</span></span><br><span class="line">  app.use(session(&#123; <span class="attr">secret</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="number">60000</span> &#125; &#125;))</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure></li>
<li><p>5、创建<code>user</code>的模块及控制器(忽视请求方式,只是方便浏览器模拟请求)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  index(</span><br><span class="line">    <span class="meta">@Request</span>() req: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">  ): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.session);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户主页&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  login(</span><br><span class="line">    <span class="meta">@Response</span>() res: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;,</span><br><span class="line">    <span class="meta">@Request</span>() req: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">  ): <span class="built_in">void</span> &#123;</span><br><span class="line">    req.session.name = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="comment">// 再次提醒使用了@Response就不能使用return</span></span><br><span class="line">    res.send(<span class="string">&#x27;登录页面&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、先在浏览器中访问<code>localhost:3000/user/login</code>然后访问<code>localhost:3000/user</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编辑器控制图打印出信息,可以获取到刚刚设置的session</span></span><br><span class="line">Session &#123;</span><br><span class="line">  <span class="attr">cookie</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">_expires</span>: <span class="number">2020</span>-<span class="number">07</span>-27T09:<span class="number">28</span>:<span class="number">20.</span>046Z,</span><br><span class="line">    <span class="attr">originalMaxAge</span>: <span class="number">60000</span>,</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、常见参数的说明</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>NO</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>secret</code></td>
<td>一个 <code>String</code> 类型的字符串，作为服务器端生成<code>session</code> 的签名</td>
</tr>
<tr>
<td>2</td>
<td><code>name</code></td>
<td>返回客户端的<code>key</code> 的名称，默认为<code>connect.sid</code>,也可以自己设置</td>
</tr>
<tr>
<td>3</td>
<td><code>resave</code></td>
<td>强制保存 <code>session</code>即使它并没有变化,。默认为<code>true</code>。建议设置成 <code>false</code></td>
</tr>
<tr>
<td>4</td>
<td><code>saveUninitalized</code></td>
<td>强制将未初始化的 <code>session</code> 存储。当新建了一个 <code>session</code> 且未设定属性或值时，它就处于 未初始化状态。在设定一个 <code>cookie</code> 前，这对于登陆验证，减轻服务端存储压力，权限控制是有帮助的。( 默认:<code>true</code>)。建议手动添加</td>
</tr>
<tr>
<td>5</td>
<td><code>cookie</code></td>
<td>设置返回到前端<code>key</code> 的属性，默认值为<code>&#123; path: ‘/’, httpOnly: true, secure: false, maxAge: null &#125;</code>。</td>
</tr>
<tr>
<td>6</td>
<td><code>rolling</code></td>
<td>在每次请求时强行设置 <code>cookie</code>，这将重置<code>cookie</code> 过期时间(默认:<code>false</code>)</td>
</tr>
</tbody></table>
<ul>
<li><p>8、<code>session</code>的销毁</p>
</li>
<li><p>设置<code>maxAge=0</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">req.session.cookie.maxAge=<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将值设置为空</p>
</li>
<li><p>使用<code>destroy</code>销毁方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">req.session.destroy(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>9、<a href="https://github.com/kuangshp/nest-book-code/tree/09.session">本小节代码地址</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>scss</title>
    <url>/2021/05/24/scss/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>Sass 是一种 CSS 的预编译语言。它提供了 变量（variables）、嵌套（nested rules）、 混合（mixins）、 函数（functions）等功能，并且完全兼容 CSS 语法。Sass 能够帮助复杂的样式表更有条理， 并且易于在项目内部或跨项目共享设计。</p>
</blockquote>
<h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a><a href="https://sass.bootcss.com/documentation">官网</a></h3><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a><a href="https://www.runoob.com/sass/sass-tutorial.html">资料</a></h3><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>字符串</li>
<li>数字</li>
<li>颜色值</li>
<li>布尔值</li>
<li>列表</li>
<li>null值<blockquote>
<p>定义变量使用$符号</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myFont</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"><span class="variable">$myFontSize</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="variable">$myWidth</span>: <span class="number">680px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$myFont</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$myFontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$myWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote>
<p>Sass 变量的作用域只能在当前的层级上有效果，如下所示 h1 的样式为它内部定义的 green，p 标签则是为 red。</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$myColor</span>: green;   <span class="comment">// 只在 h1 里头有用，局部作用域</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="global"><a href="#global" class="headerlink" title="!global"></a>!global</h4><blockquote>
<p>当然 Sass 中我们可以使用 !global 关键词来设置变量是全局的：</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$myColor</span>: green !global;  <span class="comment">// 全局作用域</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
转换后如下css显示：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Sass-嵌套规则与属性"><a href="#Sass-嵌套规则与属性" class="headerlink" title="Sass 嵌套规则与属性"></a>Sass 嵌套规则与属性</h2></li>
</ul>
<h3 id="Sass-嵌套属性"><a href="#Sass-嵌套属性" class="headerlink" title="Sass 嵌套属性"></a>Sass 嵌套属性</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: &#123;</span><br><span class="line">  family: Helvetica, sans-serif;</span><br><span class="line">  size: <span class="number">18px</span>;</span><br><span class="line">  weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text: &#123;</span><br><span class="line">  align: center;</span><br><span class="line">  <span class="attribute">transform</span>: lowercase;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"></span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">text-transform</span>: lowercase;</span><br><span class="line"><span class="attribute">text-overflow</span>: hidden;</span><br></pre></td></tr></table></figure>

<h2 id="Sass-import-与-Partials"><a href="#Sass-import-与-Partials" class="headerlink" title="Sass @import 与 Partials"></a>Sass @import 与 Partials</h2><h3 id="Sass-Partials"><a href="#Sass-Partials" class="headerlink" title="Sass Partials"></a>Sass Partials</h3><p>如果你不希望将一个 Sass 的代码文件编译到一个 CSS 文件，你可以在文件名的开头添加一个下划线。这将告诉 Sass 不要将其编译到 CSS 文件</p>
<blockquote>
<p>以下实例创建一个 _colors.scss 的文件，但是不会编译成 _colors.css 文件：</p>
</blockquote>
<p>_colors.scss:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myPink</span>: <span class="number">#EE82EE</span>;</span><br><span class="line"><span class="variable">$myBlue</span>: <span class="number">#4169E1</span>;</span><br><span class="line"><span class="variable">$myGreen</span>: <span class="number">#8FBC8F</span>;</span><br></pre></td></tr></table></figure>
<p>如果要导入该文件，则不需要使用下划线：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myBlue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>注意：</code>请不要将带下划线与不带下划线的同名文件放置在同一个目录下，比如，_colors.scss 和 colors.scss 不能同时存在于同一个目录下，否则带下划线的文件将会被忽略。</p>
<h2 id="Sass-mixin-与-include"><a href="#Sass-mixin-与-include" class="headerlink" title="Sass @mixin 与 @include"></a>Sass @mixin 与 @include</h2><p>@mixin 指令允许我们定义一个可以在整个样式表中重复使用的样式。<br>@include 指令可以将混入（mixin）引入到文档中。</p>
<h3 id="定义一个混入"><a href="#定义一个混入" class="headerlink" title="定义一个混入"></a>定义一个混入</h3><p>混入(mixin)通过 @mixin 指令来定义。 @mixin name { property: value; property: value; … }<br>以下实例创建一个名为 “important-text” 的混入：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> important-text &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>注意：</code>Sass 的连接符号 - 与下划线符号 _ 是相同的，也就是 @mixin important-text { } 与 @mixin important_text { } 是一样的混入。</p>
<h3 id="使用混入"><a href="#使用混入" class="headerlink" title="使用混入"></a>使用混入</h3><p>@include 指令可用于包含一混入：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line">  <span class="keyword">@include</span> mixin-name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.danger</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> important-text;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>混入中也可以包含混入，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> special-text &#123;</span><br><span class="line">  <span class="keyword">@include</span> important-text;</span><br><span class="line">  <span class="keyword">@include</span> link;</span><br><span class="line">  <span class="keyword">@include</span> special-border;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="向混入传递变量"><a href="#向混入传递变量" class="headerlink" title="向混入传递变量"></a>向混入传递变量</h3><p>混入可以接收参数。<br>我们可以向混入传递变量。<br>定义可以接收参数的混入：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 混入接收两个参数 */</span></span><br><span class="line"><span class="keyword">@mixin</span> bordered(<span class="variable">$color</span>, <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myArticle</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> bordered(blue, <span class="number">1px</span>);  <span class="comment">// 调用混入，并传递两个参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myNotes</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> bordered(red, <span class="number">2px</span>); <span class="comment">// 调用混入，并传递两个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>混入的参数也可以定义默认值，语法格式如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> bordered(<span class="variable">$color</span>: blue, <span class="variable">$width</span>: <span class="number">1px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在包含混入时，你只需要传递需要的变量名及其值：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>: <span class="number">1in</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    style: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="keyword">@include</span> sexy-border(blue); &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="keyword">@include</span> sexy-border(blue, <span class="number">2in</span>); &#125;</span><br></pre></td></tr></table></figure>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>有时，不能确定一个混入（mixin）或者一个函数（function）使用多少个参数，这时我们就可以使用 … 来设置可变参数。</p>
<p>例如，用于创建盒子阴影（box-shadow）的一个混入（mixin）可以采取任何数量的 box-shadow 作为参数。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow(<span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sass-extend-与-继承"><a href="#Sass-extend-与-继承" class="headerlink" title="Sass @extend 与 继承"></a>Sass @extend 与 继承</h2><p>@extend 指令告诉 Sass 一个选择器的样式从另一选择器继承。</p>
<p>如果一个样式与另外一个样式几乎相同，只有少量的区别，则使用 @extend 就显得很有用。</p>
<p>以下 Sass 实例中，我们创建了一个基本的按钮样式 .button-basic，接着我们定义了两个按钮样式 .button-report 与 .button-submit，它们都继承了 .button-basic ，它们主要区别在于背景颜色与字体颜色，其他的样式都是一样的。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-basic</span>  &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-report</span>  &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .button-basic;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-submit</span>  &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .button-basic;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转换后：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-basic</span>, <span class="selector-class">.button-report</span>, <span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-report</span>  &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-submit</span>  &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 @extend 后，我们在 HTML 按钮标签中就不需要指定多个类 class=”button-basic button-report” ，只需要设置 class=”button-report” 类就好了。</p>
<p>@extend 很好的体现了代码的复用。</p>
<h2 id="Sass-函数"><a href="#Sass-函数" class="headerlink" title="Sass 函数"></a>Sass 函数</h2><p>Sass 定义了各种类型的函数，这些函数我们可以通过 CSS 语句直接调用。</p>
<h3 id="Sass-字符串相关函数"><a href="#Sass-字符串相关函数" class="headerlink" title="Sass 字符串相关函数"></a>Sass 字符串相关函数</h3><p>Sass String(字符串) 函数用于处理字符串并获取相关信息。</p>
<p>Sass 字符串的起始索引值从 1 开始，记住不是 0。</p>
<p>下表列出了 Sass 的字符串函数：</p>
<ul>
<li>quote(string) 给字符串添加引号。</li>
<li>unquote(string) 移除字符串的引号。</li>
<li>str-index(string, substring) 返回 substring 子字符串第一次在 string 中出现的位置。如果没有匹配到子字符串，则返回 null。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str-index(abcd, a)  =&gt; <span class="number">1</span></span><br><span class="line">str-index(abcd, ab) =&gt; <span class="number">1</span></span><br><span class="line">str-index(abcd, X)  =&gt; <span class="literal">null</span></span><br><span class="line">str-index(abcd, c)  =&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li>str-insert(string, insert, index) 在字符串 string 中 index 位置插入 insert。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str-insert(<span class="string">&quot;Hello world!&quot;</span>, <span class="string">&quot; runoob&quot;</span>, <span class="number">6</span>)</span><br><span class="line">结果: <span class="string">&quot;Hello runoob world!&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>str-slice(string, start, end) 从 string 中截取子字符串，通过 start-at 和 end-at 设置始末位置，未指定结束索引值则默认截取到字符串末尾。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str-slice(<span class="string">&quot;abcd&quot;</span>, <span class="number">2</span>, <span class="number">3</span>)   =&gt; <span class="string">&quot;bc&quot;</span></span><br><span class="line">str-slice(<span class="string">&quot;abcd&quot;</span>, <span class="number">2</span>)      =&gt; <span class="string">&quot;bcd&quot;</span></span><br><span class="line">str-slice(<span class="string">&quot;abcd&quot;</span>, -<span class="number">3</span>, -<span class="number">2</span>) =&gt; <span class="string">&quot;bc&quot;</span></span><br><span class="line">str-slice(<span class="string">&quot;abcd&quot;</span>, <span class="number">2</span>, -<span class="number">2</span>)  =&gt; <span class="string">&quot;bc&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>to-lower-case(string)</li>
<li>to-upper-case(string)</li>
<li>unique-id() 返回一个无引号的随机字符串作为 id。不过也只能保证在单次的 Sass 编译中确保这个 id 的唯一性。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unique-id()</span><br><span class="line"><span class="attr">Result</span>: uad053b1c</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Sass-数字函数"><a href="#Sass-数字函数" class="headerlink" title="Sass 数字函数"></a>Sass 数字函数</h3><ul>
<li>abs(number) 返回一个数值的绝对值</li>
<li>ceil(number) 向上取整</li>
<li>comparable(num1, num2) 返回一个布尔值，判断 num1 与 num2 是否可以进行比较</li>
<li>floor(number) 向下取整</li>
<li>max(number…) 返回最大值</li>
<li>min(number…) 返回最小值</li>
<li>percentage(number) 将数字转化为百分比的表达形式</li>
<li>random() 返回 0-1 区间内的小数，</li>
<li>round(number) 返回最接近该数的一个整数，四舍五入</li>
</ul>
<h3 id="Sass-列表-List-函数"><a href="#Sass-列表-List-函数" class="headerlink" title="Sass 列表(List)函数"></a>Sass 列表(List)函数</h3><p>Sass 列表(List)函数用于处理列表，可以访问列表中的值，向列表添加元素，合并列表等。</p>
<p>Sass 列表是不可变的，因此在处理列表时，返回的是一个新的列表，而不是在原有的列表上进行修改。</p>
<p>列表的起始索引值为 1，记住不是 0。</p>
<ul>
<li>append(list, value, [separator]) 将单个值 value 添加到列表尾部。separator 是分隔符，默认会自动侦测，或者指定为逗号或空格</li>
<li>index(list, value) 返回元素 value 在列表中的索引位置</li>
<li>is-bracketed(list) 判断列表中是否有中括号</li>
<li>join(list1, list2, [separator, bracketed]) 合并两列表，将列表 list2 添加到列表 list1 的末尾。separator 是分隔符，默认会自动侦测，或者指定为逗号或空格。 bracketed 默认会自动侦测是否有中括号，可以设置为 true 或 false。</li>
<li>length(list) 返回列表的长度</li>
<li>list-separator(list) 返回一列表的分隔符类型。可以是空格或逗号。</li>
<li>nth(list, n)     获取第 n 项的值</li>
<li>set-nth(list, n, value) 设置列表第 n 项的值为 value</li>
<li>zip(lists) 将多个列表按照以相同索引值为一组，重新组成一个新的多维度列表</li>
</ul>
<h3 id="Sass-Map-映射-函数"><a href="#Sass-Map-映射-函数" class="headerlink" title="Sass Map(映射)函数"></a>Sass Map(映射)函数</h3><p>Sass Map(映射)对象是以一对或多对的 key/value 来表示。</p>
<p>Sass Map 是不可变的，因此在处理 Map 对象时，返回的是一个新的 Map 对象，而不是在原有的 Map 对象上进行修改。</p>
<ul>
<li><p>map-get(map, key) 返回 Map 中 key 所对应的 value(值)。如没有对应的 key，则返回 null 值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$font-sizes: (<span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">map-get($font-sizes, <span class="string">&quot;small&quot;</span>)</span><br><span class="line">结果: 12px</span><br></pre></td></tr></table></figure></li>
<li><p>map-has-key(map, key) 判断 map 是否有对应的 key，存在返回 true，否则返回 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$font-sizes: (<span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">map-has-key($font-sizes, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">结果: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>map-keys(map) 返回 map 中所有的 key 组成的队列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$font-sizes: (<span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">map-keys($font-sizes)</span><br><span class="line">结果: <span class="string">&quot;small&quot;</span>, <span class="string">&quot;normal, &quot;</span>large<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>map-merge(map1, map2) 合并两个 map 形成一个新的 map 类型，即将 map2 添加到 map1的尾部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$font-sizes: (<span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">$font-sizes2: (<span class="string">&quot;x-large&quot;</span>: 30px, <span class="string">&quot;xx-large&quot;</span>: 36px)</span><br><span class="line">map-merge($font-sizes, $font-sizes2)</span><br><span class="line">结果: <span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px, <span class="string">&quot;x-large&quot;</span>: 30px, <span class="string">&quot;xx-large&quot;</span>: 36px</span><br></pre></td></tr></table></figure>
</li>
<li><p>map-remove(map, keys…)     移除 map 中的 keys，多个 key 使用逗号隔开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$font-sizes: (<span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">map-remove($font-sizes, <span class="string">&quot;small&quot;</span>)</span><br><span class="line">结果: (<span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">map-remove($font-sizes, <span class="string">&quot;small&quot;</span>, <span class="string">&quot;large&quot;</span>)</span><br><span class="line">结果: (<span class="string">&quot;normal&quot;</span>: 18px)</span><br></pre></td></tr></table></figure>
</li>
<li><p>map-values(map) 返回 map 中所有的 value 并生成一个队列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$font-sizes: (<span class="string">&quot;small&quot;</span>: 12px, <span class="string">&quot;normal&quot;</span>: 18px, <span class="string">&quot;large&quot;</span>: 24px)</span><br><span class="line">map-values($font-sizes)</span><br><span class="line">结果: 12px, 18px, 24px</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Sass-选择器函数"><a href="#Sass-选择器函数" class="headerlink" title="Sass 选择器函数"></a>Sass 选择器函数</h3><p>Sass 选择器函数用于查看与处理选择器。</p>
<ul>
<li><p>is-superselector(super, sub)     比较两个选择器匹配的范围，即判断 super 选择器是否包含了 sub 选择器所匹配的范围，是的话返回 true，否则返回 false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">is-superselector(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;div.myInput&quot;</span>)</span><br><span class="line">结果: <span class="literal">true</span></span><br><span class="line">is-superselector(<span class="string">&quot;div.myInput&quot;</span>, <span class="string">&quot;div&quot;</span>)</span><br><span class="line">结果: <span class="literal">false</span></span><br><span class="line">is-superselector(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;div&quot;</span>)</span><br><span class="line">结果: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>selector-append(selectors) 将第二个 (也可以有多个) 添加到第一个选择器的后面。 selector.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selector-append(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;.myInput&quot;</span>)</span><br><span class="line">结果: div.myInput</span><br><span class="line">selector-append(<span class="string">&quot;.warning&quot;</span>, <span class="string">&quot;__a&quot;</span>)</span><br><span class="line">结果: .warning__a</span><br></pre></td></tr></table></figure></li>
<li><p>selector-nest(selectors) 返回一个新的选择器，该选择器通过提供的列表选择器生成一个嵌套的列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selector-nest(<span class="string">&quot;ul&quot;</span>, <span class="string">&quot;li&quot;</span>)</span><br><span class="line">结果: ul li</span><br><span class="line">selector-nest(<span class="string">&quot;.warning&quot;</span>, <span class="string">&quot;alert&quot;</span>, <span class="string">&quot;div&quot;</span>)</span><br><span class="line">结果: .warning div, alert div</span><br></pre></td></tr></table></figure>
</li>
<li><p>selector-parse(selector) 给定一个选择器，用replacement 替换 original 后返回一个新的选择器队列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selector-replace(<span class="string">&quot;p.warning&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;div&quot;</span>)</span><br><span class="line">结果: div.warning</span><br></pre></td></tr></table></figure>
</li>
<li><p>selector-unify(selector1, selector2) 将两组选择器合成一个复合选择器。如两个选择器无法合成，则返回 null 值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selector-unify(<span class="string">&quot;myInput&quot;</span>, <span class="string">&quot;.disabled&quot;</span>)</span><br><span class="line">结果: myInput.disabled</span><br><span class="line">selector-unify(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;h1&quot;</span>)</span><br><span class="line">结果: <span class="literal">null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>simple-selectors(selectors) 将合成选择器拆为单个选择器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">simple-selectors(<span class="string">&quot;div.myInput&quot;</span>)</span><br><span class="line">结果: div, .myInput</span><br><span class="line">simple-selectors(<span class="string">&quot;div.myInput:before&quot;</span>)</span><br><span class="line">结果: div, .myInput, :before</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Sass-Introspection-函数"><a href="#Sass-Introspection-函数" class="headerlink" title="Sass Introspection 函数"></a>Sass Introspection 函数</h3><p>Sass Introspection 函数比较少用于构建样式表，一般用于代码的调试上。</p>
<ul>
<li><p>call(function, arguments…) 函数的动态调用，即调用函数 function 参数为 arguments，并返回结果。</p>
</li>
<li><p>content-exists() 查看当前的混入是否传递 @content 块。</p>
</li>
<li><p>feature-exists(feature) 检查当前的 Sass 实现是否支持该特性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">feature-exists(<span class="string">&quot;at-error&quot;</span>);</span><br><span class="line">结果: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>function-exists(functionname) 检测指定的函数是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>-<span class="title">exists</span>(<span class="params"><span class="string">&quot;nonsense&quot;</span></span>)</span></span><br><span class="line"><span class="function">结果: <span class="title">false</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>get-function(functionname, css: false)     返回指定函数。如果 css 为 true，则返回纯 CSS 函数</p>
</li>
<li><p>global-variable-exists(variablename) 检测某个全局变量是否定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable-exists(a)</span><br><span class="line">结果: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>inspect(value)     返回一个字符串的表示形式，value 是一个 sass 表达式。</p>
</li>
<li><p>mixin-exists(mixinname) 检测指定混入 (mixinname) 是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mixin-exists(<span class="string">&quot;important-text&quot;</span>)</span><br><span class="line">结果: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>type-of(value) 返回值类型。返回值可以是 number, string, color, list, map, bool, null, function, arglist</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type-<span class="keyword">of</span>(15px)</span><br><span class="line">结果: number</span><br><span class="line">type-<span class="keyword">of</span>(#ff0000)</span><br><span class="line">结果: color</span><br></pre></td></tr></table></figure></li>
<li><p>unit(number) 返回传入数字的单位（或复合单位）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unit(15px)</span><br><span class="line">结果: px</span><br></pre></td></tr></table></figure>
</li>
<li><p>unitless(number) 返回一个布尔值，判断传入的数字是否带有单位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unitless(15px)</span><br><span class="line">结果: <span class="literal">false</span></span><br><span class="line">unitless(<span class="number">15</span>)</span><br><span class="line">结果: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>variable-exists(variablename) 判断变量是否在当前的作用域下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable-exists(b)</span><br><span class="line">结果: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Sass-颜色函数"><a href="#Sass-颜色函数" class="headerlink" title="Sass 颜色函数"></a>Sass 颜色函数</h3><p>Sass 颜色函数可以分为三个部分：颜色设置、颜色获取以及颜色操作。</p>
<p>下表列出了 Sass 的颜色函数：</p>
<h4 id="Sass-颜色设置"><a href="#Sass-颜色设置" class="headerlink" title="Sass 颜色设置"></a>Sass 颜色设置</h4><ul>
<li><code>rgb(red, green, blue)</code> 创建一个 Red-Green-Blue (RGB) 色。其中 R 是 “red” 表示红色，而 G 是 “green” 绿色，B 是 “blue” 蓝色。</li>
<li><code>rgba(red, green, blue, alpha)</code> 根据红、绿、蓝和透明度值创建一个颜色。</li>
<li><code>hsl(hue, saturation, lightness)</code> 通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色</li>
<li><code>hsla(hue, saturation, lightness, alpha)</code> 通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色。</li>
<li><code>grayscale(color)</code> 将一个颜色变成灰色，相当于 desaturate( color,100%)</li>
<li><code>complement(color)</code> 返回一个补充色，相当于adjust-hue($color,180deg)</li>
<li><code>invert(color, weight)</code> 返回一个反相色，红、绿、蓝色值倒过来，而透明度不变。</li>
</ul>
<h4 id="Sass-颜色获取"><a href="#Sass-颜色获取" class="headerlink" title="Sass 颜色获取"></a>Sass 颜色获取</h4><ul>
<li><code>red(color)</code>     从一个颜色中获取其中红色值（0-255）。</li>
<li><code>green(color)</code> 从一个颜色中获取其中绿色值（0-255）。</li>
<li><code>blue(color)</code> 从一个颜色中获取其中蓝色值（0-255）。</li>
<li><code>hue(color)</code> 返回颜色在 HSL 色值中的角度值 (0deg - 255deg)。</li>
<li><code>saturation(color)</code> 获取一个颜色的饱和度值(0% - 100%)。</li>
<li><code>lightness(color)</code> 获取一个颜色的亮度值(0% - 100%)。</li>
<li><code>alpha(color)</code> Returns the alpha channel of color as a number between 0 and 1</li>
<li><code>opacity(color)</code> 获取颜色透明度值(0-1)。</li>
</ul>
<h4 id="Sass-颜色操作"><a href="#Sass-颜色操作" class="headerlink" title="Sass 颜色操作"></a>Sass 颜色操作</h4><ul>
<li><code>mix(color1, color2, weight)</code> 把两种颜色混合起来。 weight 参数必须是 0% 到 100%。默认 weight 为 50%，表明新颜色各取 50% color1 和 color2 的色值相加。如果 weight 为 25%，那表明新颜色为 25% color1 和 75% color2 的色值相加。</li>
<li><code>adjust-hue(color, degrees)</code> 通过改变一个颜色的色相值（-360deg - 360deg），创建一个新的颜色。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">adjust-hue(#7fffd4, 80deg);</span><br><span class="line">结果: #8080ff</span><br></pre></td></tr></table></figure></li>
<li><code>adjust-color(color, red, green, blue, hue, saturation, lightness, alpha)</code> 这个函数能够调整给定色彩的一个或多个属性值，包括 RGB 和 HSL 色彩的各项色值参数，另外还有 alpha 通道的取值。这些属性值的调整依赖传入的关键值参数，通过这些参数再与给定颜色相应的色彩值做加减运算。</li>
<li><code>change-color(color, red, green, blue, hue, saturation, lightness, alpha)</code> 跟上面 adjust-color 类似，只是在该函数中传入的参数将直接替换原来的值，而不做任何的运算。</li>
<li><code>scale-color(color, red, green, blue,  saturation, lightness, alpha)</code><br>另一种实用的颜色调节函数。adjust-color 通过传入的参数简单的与本身的色值参数做加减，有时候可能会导致累加值溢出，当然，函数会把结果控制在有效的阈值内。而 scale-color 函数则避免了这种情况，可以不必担心溢出，让参数在阈值范围内进行有效的调节。<br>举个例子，一个颜色的亮度 lightness 取值在 0% ~ 100% 之间，假如执行 scale-color($color, $lightness: 40%)，表明该颜色的亮度将有 (100 - 原始值) × 40% 的增幅<br>另一个例子，执行 scale-color($color, $lightness: -40%)，表明这个颜色的亮度将减少 (原始值 - 0) × 40% 这么多的值。<br>所有传参的取值范围都在 0% ~ 100% 之间，并且 RGB 同 HSL 的传参不能冲突。</li>
<li><code>rgba(color, alpha)</code> 根据红、绿、蓝和透明度值创建一个颜色</li>
<li><code>lighten(color, amount)</code> 通过改变颜色的亮度值（0% - 100%），让颜色变亮，创建一个新的颜色</li>
<li><code>darken(color, amount)</code> 通过改变颜色的亮度值（0% - 100%），让颜色变暗，创建一个新的颜色</li>
<li><code>saturate(color, amount)</code> 提高传入颜色的色彩饱和度。等同于 adjust-color( color, saturation: amount)</li>
<li><code>desaturate(color, amount)</code> 调低一个颜色的饱和度后产生一个新的色值。同样，饱和度的取值区间在 0% ~ 100%。等同于 adjust-color(color, saturation: -amount)</li>
<li><code>opacify(color, amount)</code> 降低颜色的透明度，取值在 0-1 之。等价于 adjust-color(color, alpha: amount)</li>
<li><code>fade-in(color, amount)</code> 降低颜色的透明度，取值在 0-1 之。等价于 adjust-color(color, alpha: amount)</li>
<li><code>transparentize(color, amount)</code> 提升颜色的透明度，取值在 0-1 之间。等价于 adjust-color(color, alpha: -amount)</li>
<li><code>fade-out(color, amount)</code> 提升颜色的透明度，取值在 0-1 之间。等价于 adjust-color(color, alpha: -amount)</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
</search>
